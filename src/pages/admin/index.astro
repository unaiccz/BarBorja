---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Panel de Administraci√≥n - BarBorja">
    <div class="admin-container">
        <div class="admin-header">
            <h1>Panel de Administraci√≥n</h1>
            <button class="btn-logout" onclick="logout()">
                <span>üö™</span>
                Cerrar Sesi√≥n
            </button>
        </div>
        
        <!-- Navigation Tabs -->
        <nav class="admin-nav">
            <button class="tab-button active" data-tab="productos">
                <span class="icon">üì¶</span>
                Productos
            </button>
            <button class="tab-button" data-tab="pedidos">
                <span class="icon">üìã</span>
                Pedidos Mesa
            </button>
            <button class="tab-button" data-tab="domicilio">
                <span class="icon">üè†</span>
                Pedidos Domicilio
            </button>
            <button class="tab-button" data-tab="pagos-barra">
                <span class="icon">üí∞</span>
                Pagos en Barra
            </button>
            <button class="tab-button" data-tab="mesas-qr" onclick="window.location.href='/admin/mesas-qr'">
                <span class="icon">üì±</span>
                QR Mesas
            </button>
        </nav>

        <!-- Products Section -->
        <div id="productos" class="tab-content active">
            <div class="section-header">
                <h2>Gesti√≥n de Productos</h2>
                <button class="btn btn-primary" id="add-product-btn">
                    <span class="icon">‚ûï</span>
                    Nuevo Producto
                </button>
            </div>

            <!-- Product Form -->
            <div id="product-form" class="form-container hidden">
                <h3 id="form-title">Crear Nuevo Producto</h3>
                <form id="product-form-element">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="name">Nombre:</label>
                            <input type="text" id="name" name="name" required>
                        </div>
                        <div class="form-group">
                            <label for="price">Precio (‚Ç¨):</label>
                            <input type="number" id="price" name="price" step="0.01" min="0" required>
                        </div>
                        <div class="form-group">
                            <label for="stock">Stock:</label>
                            <input type="number" id="stock" name="stock" min="0" required>
                        </div>
                        <div class="form-group">
                            <label for="type">Tipo:</label>
                            <select id="type" name="type" required>
                                <option value="">Seleccionar tipo</option>
                                <option value="cocina">Cocina</option>
                                <option value="barra">Barra</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="description">Descripci√≥n:</label>
                        <textarea id="description" name="description" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="ingredients">Ingredientes:</label>
                        <textarea id="ingredients" name="ingredients" rows="2" placeholder="Separar con comas"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="allergens">Al√©rgenos:</label>
                        <textarea id="allergens" name="allergens" rows="2" placeholder="Separar con comas"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="image_url">URL de Imagen:</label>
                        <input type="url" id="image_url" name="image_url" placeholder="https://ejemplo.com/imagen.jpg">
                        <small style="color: #666; display: block; margin-top: 5px;">Opcional: URL de la imagen del producto</small>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-success">Guardar</button>
                        <button type="button" class="btn btn-secondary" id="cancel-form">Cancelar</button>
                    </div>
                </form>
            </div>

            <!-- Products List -->
            <div class="products-container">
                <div class="filter-bar">
                    <input type="text" id="search-products" placeholder="Buscar productos...">
                    <select id="filter-type">
                        <option value="">Todos los tipos</option>
                        <option value="cocina">Cocina</option>
                        <option value="barra">Barra</option>
                    </select>
                </div>
                <div id="products-list" class="products-grid">
                    <!-- Products will be loaded here -->
                </div>
            </div>
        </div>

        <!-- Kitchen Orders Section -->
        <div id="pedidos" class="tab-content">
            <div class="section-header">
                <h2>Gesti√≥n de Pedidos Mesa</h2>
                <div class="status-filters">
                    <button class="filter-btn active" data-status="all">Todos</button>
                    <button class="filter-btn" data-status="pendiente">Pendientes</button>
                    <button class="filter-btn" data-status="preparando">En Preparaci√≥n</button>
                    <button class="filter-btn" data-status="listo">Listos</button>
                    <button class="filter-btn" data-status="entregado">Entregados</button>
                </div>
                <div style="display: flex; gap: 10px; margin-top: 10px;">
                    <button class="btn btn-warning" onclick="clearAllOrders()" style="flex: 1;">
                        üóëÔ∏è Vaciar Pedidos
                    </button>
                    <button class="btn btn-info" onclick="printAllOrders()" style="flex: 1;">
                        üñ®Ô∏è Imprimir Todos
                    </button>
                </div>
            </div>
            <div class="type-filters" style="display: flex; gap: 10px; margin-bottom: 20px; justify-content: center;">
                <button class="type-filter-btn active" data-type="all">üìã Todos</button>
                <button class="type-filter-btn" data-type="cocina">üç≥ Cocina</button>
                <button class="type-filter-btn" data-type="barra">üç∫ Barra</button>
            </div>
            <div id="orders-list" class="orders-container">
                <!-- All orders will be loaded here -->
            </div>
        </div>

        <!-- Delivery Orders Section -->
        <div id="domicilio" class="tab-content">
            <div class="section-header">
                <h2>üè† Gesti√≥n de Pedidos a Domicilio</h2>
                <div class="domicilio-stats" id="domicilio-stats">
                    <!-- Stats will be loaded here -->
                </div>
                <div class="domicilio-filters">
                    <button class="filter-btn active" data-payment="all">Todos</button>
                    <button class="filter-btn" data-payment="pending">üî¥ Pendientes de Pago</button>
                    <button class="filter-btn" data-payment="paid">‚úÖ Pagados</button>
                </div>
            </div>
            <div id="domicilio-orders-list" class="domicilio-orders-container">
                <!-- Delivery orders will be loaded here -->
            </div>
        </div>

        <!-- Cash Payments Section -->
        <div id="pagos-barra" class="tab-content">
            <div class="section-header">
                <h2>üí∞ Confirmaci√≥n de Pagos en Barra</h2>
                <div class="pagos-stats" id="pagos-stats">
                    <!-- Stats will be loaded here -->
                </div>
            </div>
            <div id="pagos-barra-list" class="pagos-container">
                <!-- Cash payments will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loading" class="loading hidden">
        <div class="spinner"></div>
        <p>Cargando...</p>
    </div>

    <!-- Toast Notifications -->
    <div id="toast-container" class="toast-container"></div>

    <!-- Ticket Modal -->
    <div id="ticket-modal" class="modal hidden">
        <div class="modal-content ticket-modal-content">
            <div class="ticket" id="printable-ticket">
                <!-- Ticket content will be generated dynamically -->
            </div>
            <div class="ticket-actions">
                <button class="btn btn-success" onclick="window.print()">
                    üñ®Ô∏è Imprimir
                </button>
                <button class="btn btn-secondary" id="close-ticket-modal">
                    Cerrar
                </button>
            </div>
        </div>
    </div>
</Layout>

<style>
    .admin-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 30px 20px;
        background: linear-gradient(135deg, #fdf6e3, #f4f1e8);
        min-height: 100vh;
    }

    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 40px;
    }

    .admin-container h1 {
        color: #5d4e37;
        margin: 0;
        font-size: 3rem;
        font-family: 'Georgia', serif;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        position: relative;
    }

    .btn-logout {
        padding: 12px 24px;
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);
    }

    .btn-logout:hover {
        background: linear-gradient(135deg, #c0392b, #a93226);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(231, 76, 60, 0.4);
    }

    .btn-logout span {
        font-size: 18px;
    }

    /* Navigation Tabs */
    .admin-nav {
        display: flex;
        background: #f8f9fa;
        border-radius: 10px;
        padding: 5px;
        margin-bottom: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .tab-button {
        flex: 1;
        padding: 15px 20px;
        border: none;
        background: transparent;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 16px;
        font-weight: 500;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .tab-button:hover {
        background: #e9ecef;
    }

    .tab-button.active {
        background: #007bff;
        color: white;
        box-shadow: 0 2px 8px rgba(0,123,255,0.3);
    }

    .tab-button .icon {
        font-size: 18px;
    }

    /* Tab Content */
    .tab-content {
        display: none;
        animation: fadeIn 0.3s ease;
    }

    .tab-content.active {
        display: block;
    }

    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* Section Headers */
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 15px;
        border-bottom: 2px solid #e9ecef;
    }

    .section-header h2 {
        color: #2c3e50;
        margin: 0;
        font-size: 1.8rem;
    }

    /* Buttons */
    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        text-decoration: none;
    }

    .btn-primary {
        background: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background: #0056b3;
        transform: translateY(-1px);
    }

    .btn-success {
        background: #28a745;
        color: white;
    }

    .btn-success:hover {
        background: #1e7e34;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #545b62;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .btn-warning {
        background: #ffc107;
        color: #212529;
    }

    .btn-warning:hover {
        background: #e0a800;
    }

    .btn-info {
        background: #17a2b8;
        color: white;
    }

    .btn-info:hover {
        background: #138496;
    }

    /* Form Styles */
    .form-container {
        background: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .form-container h3 {
        margin-top: 0;
        color: #2c3e50;
        margin-bottom: 20px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #2c3e50;
    }

    .form-group input,
    .form-group select,
    .form-group textarea {
        width: 100%;
        padding: 10px;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.3s ease;
        box-sizing: border-box;
    }

    .form-group input:focus,
    .form-group select:focus,
    .form-group textarea:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
    }

    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 25px;
    }

    /* Filter Bar - Modern Style */
    .filter-bar {
        display: flex;
        gap: 16px;
        margin-bottom: 32px;
        align-items: center;
        padding: 20px;
        background: #ffffff;
        border-radius: 16px;
        border: 1px solid #f1f3f4;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.06);
    }

    .filter-bar input,
    .filter-bar select {
        padding: 12px 16px;
        border: 1px solid #d1d5db;
        border-radius: 12px;
        font-size: 14px;
        font-weight: 500;
        background: #ffffff;
        transition: all 0.2s ease;
    }

    .filter-bar input:focus,
    .filter-bar select:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .filter-bar input {
        flex: 1;
        max-width: 320px;
    }

    .filter-bar input::placeholder {
        color: #9ca3af;
    }

    /* Products Grid - Individual Menu Items Style */
    .products-grid {
        display: flex;
        flex-direction: column;
        gap: 40px;
        padding: 30px;
        background: linear-gradient(135deg, 
            #fefcf7 0%, 
            #faf7f0 25%, 
            #f8f4e6 50%, 
            #f5f1e8 75%, 
            #f2ede5 100%);
        border-radius: 25px;
        box-shadow: inset 0 0 20px rgba(212, 175, 55, 0.1);
    }

    .product-image {
        width: 100%;
        height: 200px;
        overflow: hidden;
        border-radius: 12px;
        margin-bottom: 20px;
        background: linear-gradient(135deg, #f5f1e8, #faf7f0);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image img {
        transform: scale(1.05);
    }

    .product-card {
        background: linear-gradient(145deg, #ffffff, #fefefe);
        border: 3px solid #d4af37;
        border-radius: 20px;
        padding: 35px;
        position: relative;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 
            0 8px 25px rgba(212, 175, 55, 0.2),
            0 2px 10px rgba(0, 0, 0, 0.1);
        font-family: 'Georgia', serif;
        margin-bottom: 20px;
        background-image: 
            radial-gradient(circle at 20% 20%, rgba(212, 175, 55, 0.03) 0%, transparent 50%),
            radial-gradient(circle at 80% 80%, rgba(212, 175, 55, 0.03) 0%, transparent 50%);
    }

    .product-card::before {
        content: '';
        position: absolute;
        top: 12px;
        left: 12px;
        right: 12px;
        bottom: 12px;
        border: 2px solid #e8d5a3;
        border-radius: 12px;
        pointer-events: none;
        box-shadow: inset 0 0 20px rgba(212, 175, 55, 0.05);
    }

    .product-card::after {
        content: '‚ú¶';
        position: absolute;
        top: -8px;
        left: 50%;
        transform: translateX(-50%);
        color: #d4af37;
        font-size: 16px;
        background: #ffffff;
        padding: 0 10px;
        text-shadow: 0 0 10px rgba(212, 175, 55, 0.5);
    }

    .product-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(212, 175, 55, 0.25);
        border-color: #b8941f;
    }

    .product-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 3px double #d4af37;
        position: relative;
    }

    .product-card-header::after {
        content: '‚óÜ';
        position: absolute;
        bottom: -8px;
        left: 50%;
        transform: translateX(-50%);
        color: #d4af37;
        font-size: 12px;
        background: #ffffff;
        padding: 0 8px;
    }

    .product-card h3 {
        margin: 0;
        color: #2c1810;
        font-size: 1.6rem;
        font-weight: 700;
        line-height: 1.3;
        font-family: 'Georgia', serif;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
        letter-spacing: -0.5px;
        position: relative;
    }

    .product-card h3::after {
        content: '';
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 60%;
        height: 2px;
        background: linear-gradient(90deg, #d4af37, transparent);
        border-radius: 1px;
    }

    .product-card .type-badge {
        display: inline-flex;
        align-items: center;
        padding: 8px 16px;
        border-radius: 25px;
        font-size: 11px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 1.5px;
        flex-shrink: 0;
        font-family: sans-serif;
        border: 2px solid rgba(255,255,255,0.8);
        position: relative;
        overflow: hidden;
    }

    .type-badge::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
    }

    .product-card:hover .type-badge::before {
        left: 100%;
    }

    .type-badge.cocina {
        background: linear-gradient(135deg, #ff6b35, #ff8a50, #ff6b35);
        color: white;
        box-shadow: 
            0 4px 15px rgba(255, 107, 53, 0.4),
            0 0 20px rgba(255, 107, 53, 0.2);
    }

    .type-badge.barra {
        background: linear-gradient(135deg, #4a90e2, #357abd, #4a90e2);
        color: white;
        box-shadow: 
            0 4px 15px rgba(74, 144, 226, 0.4),
            0 0 20px rgba(74, 144, 226, 0.2);
    }

    .product-card .price {
        font-size: 2.2rem;
        font-weight: 700;
        color: #d4af37;
        margin: 25px 0;
        display: flex;
        align-items: baseline;
        font-family: 'Georgia', serif;
        text-shadow: 0 2px 4px rgba(212, 175, 55, 0.3);
        position: relative;
        justify-content: center;
        background: linear-gradient(135deg, 
            rgba(212, 175, 55, 0.1), 
            rgba(212, 175, 55, 0.05), 
            rgba(212, 175, 55, 0.1));
        padding: 15px 25px;
        border-radius: 50px;
        border: 2px solid rgba(212, 175, 55, 0.2);
    }

    .product-card .price::after {
        content: "‚Ç¨";
        font-size: 1.4rem;
        font-weight: 600;
        color: #b8941f;
        margin-left: 5px;
    }

    .product-card .price::before {
        content: '';
        position: absolute;
        top: -2px;
        left: -2px;
        right: -2px;
        bottom: -2px;
        background: linear-gradient(45deg, #d4af37, #e8d5a3, #d4af37);
        border-radius: 50px;
        z-index: -1;
        opacity: 0.3;
    }

    .product-card .stock {
        color: #8b7355;
        font-size: 14px;
        font-weight: 600;
        margin: 20px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-style: italic;
        padding: 12px 20px;
        background: linear-gradient(135deg, 
            rgba(212, 175, 55, 0.1), 
            rgba(212, 175, 55, 0.05));
        border-radius: 25px;
        border: 1px solid rgba(212, 175, 55, 0.2);
    }

    .product-card .stock::before {
        content: "üì¶";
        font-size: 14px;
        filter: sepia(1) hue-rotate(25deg) saturate(2);
    }

    .product-card .description {
        color: #5d4e37;
        font-size: 16px;
        line-height: 1.7;
        margin: 25px 0;
        font-style: italic;
        text-align: center;
        padding: 20px;
        background: linear-gradient(135deg, 
            rgba(250, 248, 240, 0.8), 
            rgba(248, 244, 230, 0.9), 
            rgba(250, 248, 240, 0.8));
        border-radius: 15px;
        border: 1px solid rgba(212, 175, 55, 0.2);
        position: relative;
        box-shadow: inset 0 2px 10px rgba(212, 175, 55, 0.05);
    }

    .product-card .description::before,
    .product-card .description::after {
        content: '"';
        font-size: 2rem;
        color: #d4af37;
        font-family: 'Georgia', serif;
        opacity: 0.6;
        position: absolute;
        top: 10px;
    }

    .product-card .description::before {
        left: 15px;
    }

    .product-card .description::after {
        right: 15px;
        transform: scaleX(-1);
    }

    .product-card .meta-info {
        margin: 30px 0;
        background: linear-gradient(135deg, #faf8f0, #f8f4e6);
        padding: 25px;
        border-radius: 15px;
        border: 2px solid rgba(212, 175, 55, 0.3);
        position: relative;
        box-shadow: 0 4px 15px rgba(212, 175, 55, 0.1);
    }

    .product-card .meta-info::before {
        content: '‚Äª';
        position: absolute;
        top: -10px;
        left: 20px;
        color: #d4af37;
        font-size: 18px;
        background: #ffffff;
        padding: 0 8px;
    }

    .product-card .meta-item {
        font-size: 14px;
        color: #8b7355;
        margin-bottom: 12px;
        display: flex;
        align-items: flex-start;
        gap: 12px;
        line-height: 1.5;
        padding: 8px 0;
        border-bottom: 1px dotted rgba(212, 175, 55, 0.3);
    }

    .product-card .meta-item:last-child {
        margin-bottom: 0;
        border-bottom: none;
    }

    .product-card .meta-item strong {
        color: #5d4e37;
        font-weight: 700;
        min-width: 90px;
        font-size: 12px;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-family: sans-serif;
    }

    .product-card .actions {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px dotted #d4af37;
    }

    .product-card .btn {
        flex: 1;
        padding: 12px 16px;
        font-size: 12px;
        font-weight: 600;
        border-radius: 25px;
        border: 2px solid transparent;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 6px;
        text-decoration: none;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-family: sans-serif;
    }

    .product-card .btn:hover {
        transform: translateY(-2px);
    }

    .product-card .btn-warning {
        background: linear-gradient(135deg, #f4c542, #e6b532);
        color: #2c1810;
        border-color: #d4af37;
    }

    .product-card .btn-warning:hover {
        background: linear-gradient(135deg, #e6b532, #d4af37);
        box-shadow: 0 4px 15px rgba(244, 197, 66, 0.4);
    }

    .product-card .btn-danger {
        background: linear-gradient(135deg, #c0392b, #a93226);
        color: white;
        border-color: #a93226;
    }

    .product-card .btn-danger:hover {
        background: linear-gradient(135deg, #a93226, #922b21);
        box-shadow: 0 4px 15px rgba(192, 57, 43, 0.4);
    }

    .product-card .icon {
        font-size: 12px;
    }

    /* Stock status indicator - Menu style */
    .stock-indicator {
        position: absolute;
        top: 12px;
        right: 12px;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: 2px solid #ffffff;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .stock-indicator.in-stock {
        background: #27ae60;
    }

    .stock-indicator.low-stock {
        background: #f39c12;
    }

    .stock-indicator.out-of-stock {
        background: #e74c3c;
    }

    /* No data state - Menu style */
    .no-data {
        text-align: center;
        padding: 80px 30px;
        color: #8b7355;
        font-size: 18px;
        background: linear-gradient(135deg, #fefcf3, #faf8f0);
        border-radius: 20px;
        border: 3px dashed #d4af37;
        font-family: 'Georgia', serif;
        font-style: italic;
    }

    .no-data h3 {
        font-family: 'Georgia', serif;
        color: #5d4e37;
    }

    /* Status Filters */
    .status-filters {
        display: flex;
        gap: 10px;
    }

    .filter-btn {
        padding: 8px 16px;
        border: 2px solid #e9ecef;
        background: white;
        border-radius: 20px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s ease;
    }

    .filter-btn:hover {
        border-color: #007bff;
        color: #007bff;
    }

    .filter-btn.active {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }

    /* Type Filters */
    .type-filters {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        justify-content: center;
    }

    .type-filter-btn {
        padding: 10px 20px;
        border: 2px solid #e9ecef;
        background: white;
        border-radius: 25px;
        cursor: pointer;
        font-size: 15px;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .type-filter-btn:hover {
        border-color: #d4af37;
        color: #d4af37;
        box-shadow: 0 4px 8px rgba(212,175,55,0.2);
    }

    .type-filter-btn.active {
        background: linear-gradient(135deg, #d4af37, #f1c40f);
        color: white;
        border-color: #d4af37;
        box-shadow: 0 4px 12px rgba(212,175,55,0.3);
    }

    /* Orders Container */
    .orders-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .order-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.1);
        border-left: 4px solid #007bff;
    }

    .order-card.pending {
        border-left-color: #ffc107;
    }

    .order-card.preparing {
        border-left-color: #17a2b8;
    }

    .order-card.ready {
        border-left-color: #28a745;
    }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .order-number {
        font-weight: bold;
        font-size: 1.1rem;
        color: #2c3e50;
    }

    .order-status {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .order-status.pending {
        background: #fff3cd;
        color: #856404;
    }

    .order-status.preparing {
        background: #d1ecf1;
        color: #0c5460;
    }

    .order-status.ready {
        background: #d4edda;
        color: #155724;
    }

    .order-items {
        margin-bottom: 15px;
    }

    .order-item {
        display: flex;
        justify-content: space-between;
        padding: 5px 0;
        border-bottom: 1px solid #f8f9fa;
    }

    .order-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .order-actions .btn {
        padding: 6px 12px;
        font-size: 12px;
    }

    /* Utility Classes */
    .hidden {
        display: none !important;
    }

    .loading {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255,255,255,0.9);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Toast Notifications */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
    }

    .toast {
        background: white;
        border-radius: 8px;
        padding: 15px 20px;
        margin-bottom: 10px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        border-left: 4px solid #007bff;
        animation: slideIn 0.3s ease;
        max-width: 300px;
    }

    .toast.success {
        border-left-color: #28a745;
    }

    .toast.error {
        border-left-color: #dc3545;
    }

    .toast.warning {
        border-left-color: #ffc107;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    /* Domicilio Section Styles */
    .domicilio-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin: 20px 0;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
    }

    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 8px;
        text-align: center;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-left: 4px solid #d4af37;
    }

    .stat-card h4 {
        margin: 0 0 10px 0;
        color: #2c3e50;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-card .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: #d4af37;
        margin: 0;
    }

    .stat-card.pending {
        border-left-color: #e74c3c;
    }

    .stat-card.pending .stat-value {
        color: #e74c3c;
    }

    .stat-card.paid {
        border-left-color: #27ae60;
    }

    .stat-card.paid .stat-value {
        color: #27ae60;
    }

    .domicilio-filters {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .domicilio-orders-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .domicilio-order-card {
        background: white;
        border: 2px solid #d4af37;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 15px rgba(212, 175, 55, 0.2);
        transition: transform 0.2s ease;
        position: relative;
    }

    .domicilio-order-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(212, 175, 55, 0.3);
    }

    .domicilio-order-card.paid {
        border-color: #27ae60;
        background: linear-gradient(135deg, #ffffff, #f8fff8);
    }

    .domicilio-order-card.pending {
        border-color: #e74c3c;
        background: linear-gradient(135deg, #ffffff, #fff8f8);
    }

    .domicilio-order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px dotted #d4af37;
    }

    .domicilio-order-id {
        font-weight: bold;
        color: #2c3e50;
        font-size: 1.1rem;
    }

    .payment-status {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 11px;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .payment-status.paid {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
    }

    .payment-status.pending {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.7; }
    }

    .domicilio-customer-info {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
    }

    .domicilio-customer-info h4 {
        margin: 0 0 10px 0;
        color: #2c3e50;
        font-size: 1rem;
    }

    .customer-detail {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-size: 0.9rem;
    }

    .customer-detail strong {
        color: #5d4e37;
        min-width: 80px;
    }

    .customer-detail span {
        color: #666;
        flex: 1;
        text-align: right;
    }

    .domicilio-address {
        background: #fff3cd;
        border: 1px solid #ffc107;
        border-radius: 8px;
        padding: 12px;
        margin: 10px 0;
        font-style: italic;
        color: #856404;
    }

    .domicilio-products {
        margin-bottom: 15px;
    }

    .domicilio-products h4 {
        margin: 0 0 10px 0;
        color: #2c3e50;
        font-size: 1rem;
    }

    .domicilio-product-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .domicilio-product-item:last-child {
        border-bottom: none;
    }

    .product-item-name {
        font-weight: 500;
        color: #2c3e50;
    }

    .product-item-qty {
        color: #666;
        font-size: 0.9rem;
    }

    .product-item-price {
        font-weight: bold;
        color: #d4af37;
    }

    .domicilio-total {
        background: linear-gradient(135deg, #d4af37, #f1c40f);
        color: white;
        padding: 15px;
        border-radius: 8px;
        text-align: center;
        font-size: 1.2rem;
        font-weight: bold;
        margin: 15px 0;
        box-shadow: 0 2px 8px rgba(212, 175, 55, 0.3);
    }

    .domicilio-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .domicilio-actions .btn {
        flex: 1;
        padding: 10px;
        font-size: 12px;
        border-radius: 6px;
    }

    .domicilio-timestamp {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 0.8rem;
        color: #666;
        background: rgba(255,255,255,0.9);
        padding: 4px 8px;
        border-radius: 12px;
        border: 1px solid #e0e0e0;
    }

    /* Pagos en Barra Styles */
    .pagos-stats {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin: 20px 0;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
    }

    .pagos-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .pago-barra-card {
        background: white;
        border: 3px solid #ffc107;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 4px 20px rgba(255, 193, 7, 0.2);
        transition: transform 0.2s ease;
        position: relative;
        background: linear-gradient(135deg, #ffffff, #fffdf8);
    }

    .pago-barra-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 25px rgba(255, 193, 7, 0.3);
    }

    .pago-barra-card::before {
        content: 'üí∞';
        position: absolute;
        top: -10px;
        left: 20px;
        font-size: 20px;
        background: #ffffff;
        padding: 0 8px;
        border-radius: 50%;
        border: 2px solid #ffc107;
    }

    .pago-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px dotted #ffc107;
    }

    .mesa-info h3 {
        margin: 0 0 5px 0;
        color: #2c3e50;
        font-size: 1.3rem;
        font-weight: bold;
    }

    .pago-count {
        background: linear-gradient(135deg, #ffc107, #ffb300);
        color: #2c1810;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .pago-total {
        text-align: right;
    }

    .total-amount {
        display: block;
        font-size: 1.8rem;
        font-weight: bold;
        color: #ffc107;
        text-shadow: 0 2px 4px rgba(255, 193, 7, 0.3);
        margin-bottom: 5px;
    }

    .pago-date {
        font-size: 0.8rem;
        color: #666;
        background: rgba(255, 193, 7, 0.1);
        padding: 4px 8px;
        border-radius: 12px;
        border: 1px solid rgba(255, 193, 7, 0.3);
    }

    .pago-orders {
        margin-bottom: 20px;
    }

    .pago-order {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 10px;
        border-left: 4px solid #ffc107;
    }

    .pago-order:last-child {
        margin-bottom: 0;
    }

    .order-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 8px;
    }

    .order-id {
        font-weight: bold;
        color: #2c3e50;
        font-size: 0.9rem;
    }

    .order-amount {
        font-weight: bold;
        color: #ffc107;
        font-size: 1.1rem;
    }

    .order-items {
        font-size: 0.85rem;
        color: #666;
        line-height: 1.4;
    }

    .item-detail {
        margin-right: 10px;
        padding: 2px 6px;
        background: rgba(255, 193, 7, 0.1);
        border-radius: 8px;
        display: inline-block;
        margin-bottom: 4px;
    }

    .pago-actions {
        display: flex;
        gap: 10px;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px dotted #ffc107;
    }

    .pago-actions .btn {
        flex: 1;
        padding: 12px;
        font-size: 0.9rem;
        border-radius: 8px;
        font-weight: 600;
    }

    .pago-actions .btn-success {
        background: linear-gradient(135deg, #28a745, #20c997);
        border: none;
        color: white;
        box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
    }

    .pago-actions .btn-success:hover {
        background: linear-gradient(135deg, #20c997, #17a2b8);
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);
        transform: translateY(-1px);
    }

    .pago-actions .btn-info {
        background: linear-gradient(135deg, #17a2b8, #138496);
        border: none;
        color: white;
        box-shadow: 0 2px 8px rgba(23, 162, 184, 0.3);
    }

    .pago-actions .btn-info:hover {
        background: linear-gradient(135deg, #138496, #117a8b);
        box-shadow: 0 4px 12px rgba(23, 162, 184, 0.4);
        transform: translateY(-1px);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .admin-nav {
            flex-direction: column;
        }

        .section-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .filter-bar {
            flex-direction: column;
            align-items: stretch;
        }

        .products-grid,
        .orders-container,
        .domicilio-orders-container {
            grid-template-columns: 1fr;
        }

        .form-actions {
            justify-content: stretch;
        }

        .form-actions .btn {
            flex: 1;
        }

        .domicilio-stats {
            grid-template-columns: repeat(2, 1fr);
        }

        .domicilio-filters {
            flex-wrap: wrap;
        }
    }

    /* Ticket Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    }

    .modal.hidden {
        display: none;
    }

    .ticket-modal-content {
        background: white;
        padding: 30px;
        border-radius: 15px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .ticket {
        background: white;
        padding: 20px;
        font-family: 'Courier New', monospace;
        border: 2px dashed #333;
        margin-bottom: 20px;
        font-size: 13px;
    }

    .ticket-header {
        text-align: center;
        margin-bottom: 15px;
        border-bottom: 2px solid #333;
        padding-bottom: 10px;
    }

    .ticket-header h2 {
        margin: 0;
        font-size: 1.5rem;
    }

    .ticket-divider {
        text-align: center;
        color: #333;
        margin: 10px 0;
        font-size: 12px;
    }

    .ticket-info {
        margin: 15px 0;
    }

    .ticket-info p {
        margin: 5px 0;
        font-size: 13px;
    }

    .ticket-items {
        margin: 15px 0;
    }

    .ticket-item {
        display: flex;
        justify-content: space-between;
        margin: 8px 0;
        font-size: 13px;
    }

    .ticket-total {
        display: flex;
        justify-content: space-between;
        font-size: 1.2rem;
        font-weight: bold;
        margin: 15px 0;
        padding-top: 10px;
        border-top: 2px solid #333;
    }

    .ticket-footer {
        text-align: center;
        margin-top: 15px;
        font-size: 11px;
        border-top: 2px solid #333;
        padding-top: 10px;
    }

    .ticket-actions {
        display: flex;
        gap: 10px;
    }

    .ticket-actions .btn {
        flex: 1;
    }

    @media print {
        body * {
            visibility: hidden;
        }
        .ticket, .ticket * {
            visibility: visible;
        }
        .ticket {
            position: absolute;
            left: 0;
            top: 0;
            border: none;
        }
        .ticket-actions {
            display: none;
        }
    }
</style>

<script>
    import { supabase } from '../../lib/supabase.js';
    
    // Authentication check
    const AUTH_KEY = 'barborja_admin_auth';
    
    // Check if user is authenticated
    function checkAuth() {
        const authToken = localStorage.getItem(AUTH_KEY);
        if (!authToken) {
            window.location.href = '/admin/login';
            return false;
        }
        return true;
    }
    
    // Logout function
    window.logout = function() {
        localStorage.removeItem(AUTH_KEY);
        window.location.href = '/admin/login';
    };
    
    // Check auth before initializing
    if (!checkAuth()) {
        throw new Error('Not authenticated');
    }

    // Global variables
    let products = [];
    let orders = [];
    let currentEditingProduct = null;

    // DOM Elements
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    const addProductBtn = document.getElementById('add-product-btn');
    const productForm = document.getElementById('product-form');
    const productFormElement = document.getElementById('product-form-element');
    const cancelFormBtn = document.getElementById('cancel-form');
    const productsListContainer = document.getElementById('products-list');
    const searchInput = document.getElementById('search-products');
    const filterTypeSelect = document.getElementById('filter-type');
    const loading = document.getElementById('loading');
    const toastContainer = document.getElementById('toast-container');

    // Initialize the application
    document.addEventListener('DOMContentLoaded', async function() {
        // Initialize tabs
        if (tabButtons && tabButtons.length) {
            initializeTabs();
        }

        // Initialize product form
        if (productFormElement) {
            initializeProductForm();
        }

        // Load initial data
        await Promise.all([loadProducts(), loadOrders()]);

        // Initialize filters
        if (filterTypeSelect || searchInput) {
            initializeFilters();
        }

        // Auto-refresh every 5 seconds
        setInterval(async () => {
            const activeTab = document.querySelector('.tab-button.active');
            const tabId = activeTab?.getAttribute('data-tab');
            
            if (tabId === 'pedidos') {
                console.log('üîÑ Auto-actualizando pedidos...');
                await loadOrders();
            } else if (tabId === 'productos') {
                console.log('üîÑ Auto-actualizando productos...');
                await loadProducts();
            }
        }, 5000);
    });

    // Tab functionality
    function initializeTabs() {
        if (!tabButtons || !tabButtons.length) return;
        tabButtons.forEach(button => {
            // Skip if button has no dataset or attribute
            const tabId = button.getAttribute && button.getAttribute('data-tab');
            if (!tabId) return;
            button.addEventListener('click', () => {
                const id = button.getAttribute('data-tab');
                if (id) {
                    // switchTab may perform async fetches, but we don't need to await here
                    switchTab(id);
                }
            });
        });
    }

    // Product form functionality
    function initializeProductForm() {
        if (addProductBtn) {
            addProductBtn.addEventListener('click', () => showProductForm());
        }
        if (cancelFormBtn) {
            cancelFormBtn.addEventListener('click', hideProductForm);
        }
        if (productFormElement) {
            productFormElement.addEventListener('submit', handleProductSubmit);
        }
    }

    function showProductForm(product = null) {
        currentEditingProduct = product;
        const formTitle = document.getElementById('form-title');

        if (product) {
            if (formTitle) formTitle.textContent = 'Editar Producto';
            fillProductForm(product);
        } else {
            if (formTitle) formTitle.textContent = 'Crear Nuevo Producto';
            if (productFormElement) productFormElement.reset();
        }

        if (productForm) {
            productForm.classList.remove('hidden');
            productForm.scrollIntoView({ behavior: 'smooth' });
        }
    }

    function hideProductForm() {
        if (productForm) {
            productForm.classList.add('hidden');
        }
        currentEditingProduct = null;
        if (productFormElement) {
            productFormElement.reset();
        }
    }

    function fillProductForm(product) {
        const nameInput = document.getElementById('name');
        const descriptionInput = document.getElementById('description');
        const priceInput = document.getElementById('price');
        const stockInput = document.getElementById('stock');
        const typeInput = document.getElementById('type');
        const ingredientsInput = document.getElementById('ingredients');
        const allergensInput = document.getElementById('allergens');
        const imageUrlInput = document.getElementById('image_url');

        if (nameInput) nameInput.value = product.name || '';
        if (descriptionInput) descriptionInput.value = product.description || '';
        if (priceInput) priceInput.value = product.price || '';
        if (stockInput) stockInput.value = product.stock || '';
        if (typeInput) typeInput.value = product.type || '';
        if (ingredientsInput) ingredientsInput.value = product.ingredients || '';
        if (allergensInput) allergensInput.value = product.allergens || '';
        if (imageUrlInput) imageUrlInput.value = product.image_url || '';
    }

    async function handleProductSubmit(e) {
        e.preventDefault();

        if (!productFormElement) return;

        const formData = new FormData(productFormElement);
        const productData = {
            name: formData.get('name')?.toString() || '',
            description: formData.get('description')?.toString() || '',
            price: parseFloat(formData.get('price')?.toString() || '0'),
            stock: parseInt(formData.get('stock')?.toString() || '0'),
            type: formData.get('type')?.toString() || '',
            ingredients: formData.get('ingredients')?.toString() || '',
            allergens: formData.get('allergens')?.toString() || '',
            image_url: formData.get('image_url')?.toString() || ''
        };

        showLoading();

        try {
            let result;
            if (currentEditingProduct) {
                result = await updateProduct(currentEditingProduct.product_id, productData);
            } else {
                result = await createProduct(productData);
            }

            if (result) {
                showToast('Producto guardado exitosamente', 'success');
                hideProductForm();
                loadProducts();
            } else {
                showToast('Error al guardar el producto', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error al guardar el producto', 'error');
        } finally {
            hideLoading();
        }
    }

    // API functions moved to main block above

    // Product functions using Supabase directly
    async function createProduct(productData) {
        try {
            const { createProduct: createProductDB } = await import('/src/functions/products.js');
            return await createProductDB(
                productData.name,
                productData.description,
                productData.price,
                productData.stock,
                productData.type,
                productData.ingredients,
                productData.allergens,
                productData.image_url
            );
        } catch (error) {
            console.error('Error creating product:', error);
            return null;
        }
    }

    async function updateProduct(id, productData) {
        try {
            const { updateProduct: updateProductDB } = await import('/src/functions/products.js');
            return await updateProductDB(id, productData);
        } catch (error) {
            console.error('Error updating product:', error);
            return null;
        }
    }

    async function deleteProduct(id) {
        try {
            const { deleteProduct: deleteProductDB } = await import('/src/functions/products.js');
            return await deleteProductDB(id);
        } catch (error) {
            console.error('Error deleting product:', error);
            return false;
        }
    }

    async function loadProducts() {
        if (!productsListContainer) return;
        
        showLoading();
        try {
            const { supabase } = await import('/src/db/supabase.js');
            
            const { data, error } = await supabase
                .from('products')
                .select('*')
                .order('name', { ascending: true });
            
            if (error) {
                console.error('‚ùå Error fetching products:', error);
                products = [];
            } else {
                products = data || [];
            }
            
            renderProducts(products);
        } catch (error) {
            console.error('Error loading products:', error);
            showToast('Error al cargar los productos', 'error');
        } finally {
            hideLoading();
        }
    }    function renderProducts(productsToRender) {
        if (!productsListContainer) return;
        
        if (!productsToRender || productsToRender.length === 0) {
            productsListContainer.innerHTML = `
                <div class="no-data">
                    <div style="font-size: 64px; margin-bottom: 20px;">üçΩÔ∏è</div>
                    <h3 style="margin: 0 0 12px 0; color: #5d4e37; font-weight: 700; font-size: 1.5rem;">Nuestra Carta est√° Vac√≠a</h3>
                    <p style="margin: 0; color: #8b7355; font-size: 16px; line-height: 1.5;">Comienza agregando deliciosos platos a tu men√∫</p>
                </div>
            `;
            return;
        }

        const productsHTML = productsToRender.map(product => {
            const stockStatus = product.stock > 10 ? 'in-stock' : product.stock > 0 ? 'low-stock' : 'out-of-stock';
            return `
                <div class="product-card">
                    <div class="stock-indicator ${stockStatus}"></div>
                    ${product.image_url ? `
                        <div class="product-image">
                            <img src="${product.image_url}" alt="${product.name}" onerror="this.parentElement.style.display='none'">
                        </div>
                    ` : ''}
                    <div class="product-card-header">
                        <h3>${product.name}</h3>
                        <div class="type-badge ${product.type}">
                            ${product.type === 'cocina' ? 'üç≥ Cocina' : 'üç∫ Barra'}
                        </div>
                    </div>
                    
                    <div class="price">Precio:  ${product.price}$</div>
                    
                    ${product.description ? `<div class="description">"${product.description}"</div>` : ''}
                    
                    ${(product.ingredients || product.allergens) ? `
                        <div class="meta-info">
                            ${product.ingredients ? `
                                <div class="meta-item">
                                    <strong>Ingredientes:</strong>
                                    <span>${product.ingredients}</span>
                                </div>
                            ` : ''}
                            ${product.allergens ? `
                                <div class="meta-item">
                                    <strong>Al√©rgenos:</strong>
                                    <span>${product.allergens}</span>
                                </div>
                            ` : ''}
                        </div>
                    ` : ''}
                    
                    <div class="stock">Disponible: ${product.stock} unidades</div>
                    
                    <div class="actions">
                        <button class="btn btn-warning" onclick="editProduct(${product.product_id})">
                            <span class="icon">‚úèÔ∏è</span>
                            Editar
                        </button>
                        <button class="btn btn-danger" onclick="confirmDeleteProduct(${product.product_id})">
                            <span class="icon">üóëÔ∏è</span>
                            Eliminar
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        productsListContainer.innerHTML = productsHTML;
    }

    // Product actions
    window.editProduct = function(productId) {
        const product = products.find(p => p.product_id === productId);
        if (product) {
            showProductForm(product);
        }
    };

    window.confirmDeleteProduct = function(productId) {
        const product = products.find(p => p.product_id === productId);
        if (product && confirm(`¬øEst√°s seguro de que quieres eliminar "${product.name}"?`)) {
            deleteProductById(productId);
        }
    };

    async function deleteProductById(productId) {
        showLoading();
        try {
            const success = await deleteProduct(productId);
            if (success) {
                showToast('Producto eliminado exitosamente', 'success');
                await loadProducts();
            } else {
                showToast('Error al eliminar el producto', 'error');
            }
        } catch (error) {
            console.error('Error:', error);
            showToast('Error al eliminar el producto', 'error');
        } finally {
            hideLoading();
        }
    }

    // Filter functionality
    function initializeFilters() {
        if (searchInput) {
            searchInput.addEventListener('input', filterProducts);
        }
        if (filterTypeSelect) {
            filterTypeSelect.addEventListener('change', filterProducts);
        }
    }

    function filterProducts() {
        if (!searchInput || !filterTypeSelect) return;
        
        const searchTerm = searchInput.value.toLowerCase();
        const typeFilter = filterTypeSelect.value;

        const filteredProducts = products.filter(product => {
            const matchesSearch = product.name.toLowerCase().includes(searchTerm) ||
                                (product.description && product.description.toLowerCase().includes(searchTerm));
            const matchesType = !typeFilter || product.type === typeFilter;
            
            return matchesSearch && matchesType;
        });

        renderProducts(filteredProducts);
    }

    // Orders functionality
    let currentTypeFilter = 'all';
    let currentStatusFilter = 'all';

    async function loadOrders() {
        try {
            console.log('üîÑ Cargando √≥rdenes desde admin...');
            const { supabase } = await import('/src/db/supabase.js');
            
            const { data, error } = await supabase
                .from('orders')
                .select(`
                    order_id,
                    table_number,
                    status,
                    estimated_time,
                    total_amount,
                    created_at,
                    is_paid,
                    payment_method,
                    order_items (
                        order_item_id,
                        quantity,
                        price,
                        note,
                        products (
                            product_id,
                            name,
                            type
                        )
                    )
                `)
                .order('created_at', { ascending: false });
            
            if (error) {
                console.error('‚ùå Error fetching orders:', error);
                orders = [];
            } else {
                orders = data || [];
                console.log('üìã √ìrdenes cargadas en admin:', orders.length);
                
                if (orders.length > 0) {
                    console.log('Muestra de orden:', orders[0]);
                }
            }
            
            filterAndRenderOrders();
        } catch (error) {
            console.error('‚ùå Error loading orders:', error);
            showToast('Error al cargar los pedidos', 'error');
            orders = [];
        }
    }

    function filterAndRenderOrders() {
        console.log('üîç Filtrando pedidos - Tipo:', currentTypeFilter, 'Estado:', currentStatusFilter);
        
        let filteredOrders = orders;
        
        // Filter by type
        if (currentTypeFilter !== 'all') {
            filteredOrders = filteredOrders.filter(order => {
                if (!order.order_items || order.order_items.length === 0) return false;
                return order.order_items.some(item => 
                    item.products && item.products.type === currentTypeFilter
                );
            });
        }
        
        // Filter by status
        if (currentStatusFilter !== 'all') {
            filteredOrders = filteredOrders.filter(order => order.status === currentStatusFilter);
        }
        
        console.log('‚úÖ Pedidos filtrados:', filteredOrders.length);
        renderOrders(filteredOrders, 'orders-list');
    }

    function loadKitchenOrders() {
        // Deprecated - using unified orders now
    }

    function loadBarOrders() {
        // Deprecated - using unified orders now
    }

    function renderOrders(ordersToRender, containerId) {
        const container = document.getElementById(containerId);
        if (!container) return;
        
        if (!ordersToRender || ordersToRender.length === 0) {
            container.innerHTML = '<p class="no-data">No hay pedidos disponibles</p>';
            return;
        }

        const ordersHTML = ordersToRender.map(order => `
            <div class="order-card ${order.status} ${order.is_paid ? 'paid' : ''}">
                <div class="order-header">
                    <div class="order-number">Pedido #${order.order_id}</div>
                    <div class="order-status ${order.status}">
                        ${getStatusText(order.status)}
                    </div>
                </div>
                <div class="order-info">
                    ${order.table_number ? `<p><strong>Mesa:</strong> ${order.table_number}</p>` : ''}
                    <p><strong>Tipo:</strong> ${getOrderTypeFromProducts(order.order_items)}</p>
                    <p><strong>Hora:</strong> ${new Date(order.created_at).toLocaleTimeString()}</p>
                    <p style="${order.is_paid ? 'color: #27ae60; font-weight: bold;' : 'color: #e74c3c; font-weight: bold;'}">
                        <strong>üí≥ Pago:</strong> ${order.is_paid ? '‚úÖ Pagado' : '‚è≥ Pendiente'}
                        ${order.is_paid && order.payment_method ? ` (${order.payment_method})` : ''}
                    </p>
                </div>
                <div class="order-items">
                    ${order.order_items ? order.order_items.map(item => `
                        <div class="order-item">
                            <span>${item.quantity}x ${item.products?.name || 'Producto'}</span>
                            <span>${(item.quantity * (item.price || 0)).toFixed(2)}‚Ç¨</span>
                        </div>
                    `).join('') : ''}
                </div>
                <div class="order-total">
                    <strong>Total: ${order.total_amount?.toFixed(2) || '0.00'}‚Ç¨</strong>
                </div>
                <div class="order-actions">
                    ${getOrderActions(order)}
                </div>
            </div>
        `).join('');

        container.innerHTML = ordersHTML;
    }

    function getStatusText(status) {
        const statusMap = {
            'pendiente': 'Pendiente',
            'preparando': 'Preparando',
            'listo': 'Listo',
            'entregado': 'Entregado',
            'cancelado': 'Cancelado'
        };
        return statusMap[status] || status;
    }

    function getOrderTypeFromProducts(orderItems) {
        if (!orderItems || orderItems.length === 0) return 'Desconocido';
        
        const hasKitchen = orderItems.some(item => item.products?.type === 'cocina');
        const hasBar = orderItems.some(item => item.products?.type === 'barra');
        
        if (hasKitchen && hasBar) return 'üç≥üç∫ Cocina y Barra';
        if (hasKitchen) return 'üç≥ Cocina';
        if (hasBar) return 'üç∫ Barra';
        return 'Desconocido';
    }



    function getOrderActions(order) {
        let actions = '';
        
        // Bot√≥n de confirmar pago en barra (solo si no est√° pagado y status es entregado o pagado)
        if (!order.is_paid && (order.status === 'entregado' || order.status === 'pagado')) {
            actions += `
                <button class="btn btn-warning" onclick="confirmBarPayment(${order.order_id})" style="margin-bottom: 5px; width: 100%;">
                    üíµ Confirmar Pago en Barra
                </button>
            `;
        }
        
        // Botones normales de estado
        switch (order.status) {
            case 'pendiente':
                actions += `
                    <button class="btn btn-primary" onclick="updateOrderStatus(${order.order_id}, 'preparando')">Iniciar Preparaci√≥n</button>
                    <button class="btn btn-danger" onclick="updateOrderStatus(${order.order_id}, 'cancelado')">Cancelar</button>
                `;
                break;
            case 'preparando':
                actions += `
                    <button class="btn btn-success" onclick="updateOrderStatus(${order.order_id}, 'listo')">Marcar como Listo</button>
                    <button class="btn btn-danger" onclick="updateOrderStatus(${order.order_id}, 'cancelado')">Cancelar</button>
                `;
                break;
            case 'listo':
                actions += `<button class="btn btn-secondary" onclick="updateOrderStatus(${order.order_id}, 'entregado')">Marcar como Entregado</button>`;
                break;
            case 'entregado':
            case 'pagado':
                actions += `
                    <button class="btn btn-info" onclick="printTicket(${order.order_id})">
                        üñ®Ô∏è Imprimir Ticket
                    </button>
                `;
                break;
            case 'cancelado':
                actions += '<span class="status-final">Pedido cancelado</span>';
                break;
        }
        
        return actions;
    }

    // Order actions
    window.updateOrderStatus = async function(orderId, newStatus) {
        showLoading();
        try {
            const { supabase } = await import('/src/db/supabase.js');
            
            // If cancelling order, restore stock first
            if (newStatus === 'cancelado') {
                console.log(`üîÑ Restaurando stock para pedido cancelado: ${orderId}`);
                
                // Get order items to restore stock
                const { data: orderItems, error: itemsError } = await supabase
                    .from('order_items')
                    .select('product_id, quantity')
                    .eq('order_id', orderId);
                
                if (!itemsError && orderItems && orderItems.length > 0) {
                    // Restore stock for each item
                    for (const item of orderItems) {
                        console.log(`üì¶ Restaurando stock del producto ${item.product_id}, cantidad: +${item.quantity}`);
                        
                        // Get current stock
                        const { data: product, error: getError } = await supabase
                            .from('products')
                            .select('stock')
                            .eq('product_id', item.product_id)
                            .single();
                        
                        if (!getError && product) {
                            // Add back the quantity
                            const newStock = (product.stock || 0) + item.quantity;
                            
                            // Update stock
                            const { error: stockError } = await supabase
                                .from('products')
                                .update({ stock: newStock })
                                .eq('product_id', item.product_id);
                            
                            if (!stockError) {
                                console.log(`‚úÖ Stock restaurado para producto ${item.product_id}: ${product.stock} ‚Üí ${newStock}`);
                            }
                        }
                    }
                }
            }
            
            const { data, error } = await supabase
                .from('orders')
                .update({ status: newStatus })
                .eq('order_id', orderId)
                .select()
                .single();

            if (error) {
                showToast('Error al actualizar el estado del pedido', 'error');
            } else {
                showToast(`Pedido marcado como: ${getStatusText(newStatus)}`, 'success');
                await loadOrders();
            }
        } catch (error) {
            console.error('Error updating order status:', error);
            showToast('Error al actualizar el estado del pedido', 'error');
        } finally {
            hideLoading();
        }
    };

    window.completeOrder = function(orderId) {
        window.updateOrderStatus(orderId, 'entregado');
    };

    // Status filter functionality
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('filter-btn')) {
            const filterBtns = document.querySelectorAll('.filter-btn');
            const status = e.target.getAttribute('data-status');
            
            // Update active filter button
            filterBtns.forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');
            
            // Update filter and re-render
            currentStatusFilter = status;
            filterAndRenderOrders();
        }
        
        // Type filter functionality
        if (e.target.classList.contains('type-filter-btn')) {
            const typeFilterBtns = document.querySelectorAll('.type-filter-btn');
            const type = e.target.getAttribute('data-type');
            
            // Update active type filter button
            typeFilterBtns.forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');
            
            // Update filter and re-render
            currentTypeFilter = type;
            filterAndRenderOrders();
        }
    });

    // Utility functions
    function showLoading() {
        if (loading) {
            loading.classList.remove('hidden');
        }
    }

    function hideLoading() {
        if (loading) {
            loading.classList.add('hidden');
        }
    }

    function showToast(message, type = 'info') {
        if (!toastContainer) return;
        
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.innerHTML = `<div>${message}</div>`;
        
        toastContainer.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 5000);
    }

    // Funci√≥n para imprimir tickets
    window.printTicket = async function(orderId) {
        try {
            showLoading();
            
            // Importar supabase
            const { supabase } = await import('/src/db/supabase.js');
            
            // Obtener datos del pedido con sus items y productos
            const { data: order, error } = await supabase
                .from('orders')
                .select(`
                    *,
                    order_items (
                        quantity,
                        price,
                        products (
                            name
                        )
                    )
                `)
                .eq('order_id', orderId)
                .single();

            if (error) throw error;
            if (!order) throw new Error('Pedido no encontrado');

            // Generar HTML del ticket
            const ticketDate = new Date(order.created_at).toLocaleString('es-ES');
            const ticketHTML = `
                <div style="text-align: center; margin-bottom: 15px;">
                    <h2 style="margin: 0; font-size: 24px;">Bar Borja</h2>
                    <p style="margin: 5px 0; font-size: 14px;">Ticket #${order.order_id}</p>
                </div>
                <div style="border-top: 2px dashed #333; border-bottom: 2px dashed #333; padding: 10px 0; margin: 10px 0;">
                    <p style="margin: 5px 0;"><strong>Mesa:</strong> ${order.mesa_numero || 'N/A'}</p>
                    <p style="margin: 5px 0;"><strong>Fecha:</strong> ${ticketDate}</p>
                    <p style="margin: 5px 0;"><strong>Estado:</strong> ${order.status}</p>
                </div>
                <div style="margin: 15px 0;">
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                            <tr style="border-bottom: 1px solid #333;">
                                <th style="text-align: left; padding: 5px;">Producto</th>
                                <th style="text-align: center; padding: 5px;">Cant.</th>
                                <th style="text-align: right; padding: 5px;">Precio</th>
                                <th style="text-align: right; padding: 5px;">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${order.order_items.map(item => `
                                <tr>
                                    <td style="padding: 5px;">${item.products.name}</td>
                                    <td style="text-align: center; padding: 5px;">${item.quantity}</td>
                                    <td style="text-align: right; padding: 5px;">${item.price.toFixed(2)}‚Ç¨</td>
                                    <td style="text-align: right; padding: 5px;">${(item.quantity * item.price).toFixed(2)}‚Ç¨</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
                <div style="border-top: 2px dashed #333; padding-top: 10px; margin-top: 10px;">
                    <p style="text-align: right; font-size: 18px; margin: 5px 0;">
                        <strong>TOTAL: ${order.total_amount.toFixed(2)}‚Ç¨</strong>
                    </p>
                </div>
                <div style="text-align: center; margin-top: 20px; font-size: 12px;">
                    <p>¬°Gracias por su visita!</p>
                </div>
            `;

            // Mostrar el modal con el ticket
            const ticketModal = document.getElementById('ticket-modal');
            const printableTicket = document.getElementById('printable-ticket');
            
            if (ticketModal && printableTicket) {
                printableTicket.innerHTML = ticketHTML;
                ticketModal.classList.remove('hidden');
            }

            hideLoading();
        } catch (error) {
            console.error('Error al cargar ticket:', error);
            showToast('Error al cargar el ticket', 'error');
            hideLoading();
        }
    };

    // Listener para cerrar el modal
    const closeTicketModal = document.getElementById('close-ticket-modal');
    if (closeTicketModal) {
        closeTicketModal.addEventListener('click', () => {
            const ticketModal = document.getElementById('ticket-modal');
            if (ticketModal) {
                ticketModal.classList.add('hidden');
                // Limpiar contenido
                const printableTicket = document.getElementById('printable-ticket');
                if (printableTicket) {
                    printableTicket.innerHTML = '';
                }
            }
        });
    }

    // Funci√≥n para confirmar pago en barra desde admin
    window.confirmBarPayment = async function(orderId) {
        if (!confirm('¬øConfirmar que el cliente ha pagado en barra?')) {
            return;
        }

        try {
            showLoading();
            const { supabase } = await import('/src/db/supabase.js');
            
            const { error } = await supabase
                .from('orders')
                .update({ 
                    is_paid: true,
                    payment_method: 'efectivo',
                    status: 'pagado'
                })
                .eq('order_id', orderId);

            if (error) throw error;

            showToast('‚úÖ Pago confirmado correctamente', 'success');
            await loadOrders();
            hideLoading();
        } catch (error) {
            console.error('Error al confirmar pago:', error);
            showToast('Error al confirmar el pago', 'error');
            hideLoading();
        }
    };

    // Funci√≥n para vaciar todos los pedidos
    window.clearAllOrders = async function() {
        if (!confirm('‚ö†Ô∏è ¬øEst√°s seguro de que quieres eliminar TODOS los pedidos?\n\nEsta acci√≥n no se puede deshacer.')) {
            return;
        }

        try {
            showLoading();
            
            const { supabase } = await import('/src/db/supabase.js');
            
            // Primero eliminar todos los order_items
            const { error: itemsError } = await supabase
                .from('order_items')
                .delete()
                .neq('order_item_id', 0); // Elimina todos los registros

            if (itemsError) throw itemsError;

            // Luego eliminar todos los orders
            const { error: ordersError } = await supabase
                .from('orders')
                .delete()
                .neq('order_id', 0); // Elimina todos los registros

            if (ordersError) throw ordersError;

            showToast('‚úÖ Todos los pedidos han sido eliminados', 'success');
            await loadOrders();
            hideLoading();
        } catch (error) {
            console.error('Error al eliminar pedidos:', error);
            showToast('‚ùå Error al eliminar los pedidos', 'error');
            hideLoading();
        }
    };

    // Funci√≥n para imprimir todos los pedidos
    window.printAllOrders = async function() {
        try {
            showLoading();
            
            const { supabase } = await import('/src/db/supabase.js');
            
            // Obtener todos los pedidos con sus items y productos
            const { data: orders, error } = await supabase
                .from('orders')
                .select(`
                    *,
                    order_items (
                        quantity,
                        price,
                        products (
                            name
                        )
                    )
                `)
                .order('created_at', { ascending: false });

            if (error) throw error;
            if (!orders || orders.length === 0) {
                showToast('No hay pedidos para imprimir', 'info');
                hideLoading();
                return;
            }

            // Generar HTML de todos los tickets
            let allTicketsHTML = `
                <div style="font-family: 'Courier New', monospace; max-width: 800px; margin: 0 auto;">
                    <div style="text-align: center; margin-bottom: 30px; border-bottom: 3px solid #333; padding-bottom: 20px;">
                        <h1 style="margin: 0; font-size: 32px;">Bar Borja</h1>
                        <h2 style="margin: 10px 0; font-size: 20px;">Resumen de Pedidos</h2>
                        <p style="margin: 5px 0;">Fecha: ${new Date().toLocaleString('es-ES')}</p>
                        <p style="margin: 5px 0;">Total de Pedidos: ${orders.length}</p>
                    </div>
            `;

            let totalGeneral = 0;

            orders.forEach((order, index) => {
                const ticketDate = new Date(order.created_at).toLocaleString('es-ES');
                totalGeneral += order.total_amount;

                allTicketsHTML += `
                    <div style="border: 2px solid #333; padding: 15px; margin-bottom: 20px; page-break-inside: avoid;">
                        <div style="text-align: center; border-bottom: 2px dashed #333; padding-bottom: 10px; margin-bottom: 10px;">
                            <h3 style="margin: 0; font-size: 20px;">Pedido #${order.order_id}</h3>
                        </div>
                        <div style="margin: 10px 0;">
                            <p style="margin: 5px 0;"><strong>Mesa:</strong> ${order.mesa_numero || 'N/A'}</p>
                            <p style="margin: 5px 0;"><strong>Fecha:</strong> ${ticketDate}</p>
                            <p style="margin: 5px 0;"><strong>Estado:</strong> ${order.status}</p>
                            <p style="margin: 5px 0;"><strong>Tipo:</strong> ${order.order_type || 'N/A'}</p>
                        </div>
                        <div style="margin: 15px 0;">
                            <table style="width: 100%; border-collapse: collapse;">
                                <thead>
                                    <tr style="border-bottom: 1px solid #333;">
                                        <th style="text-align: left; padding: 5px;">Producto</th>
                                        <th style="text-align: center; padding: 5px;">Cant.</th>
                                        <th style="text-align: right; padding: 5px;">Precio</th>
                                        <th style="text-align: right; padding: 5px;">Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${order.order_items.map(item => `
                                        <tr>
                                            <td style="padding: 5px;">${item.products.name}</td>
                                            <td style="text-align: center; padding: 5px;">${item.quantity}</td>
                                            <td style="text-align: right; padding: 5px;">${item.price.toFixed(2)}‚Ç¨</td>
                                            <td style="text-align: right; padding: 5px;">${(item.quantity * item.price).toFixed(2)}‚Ç¨</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                        <div style="border-top: 2px dashed #333; padding-top: 10px; margin-top: 10px;">
                            <p style="text-align: right; font-size: 16px; margin: 5px 0;">
                                <strong>TOTAL: ${order.total_amount.toFixed(2)}‚Ç¨</strong>
                            </p>
                        </div>
                    </div>
                `;
            });

            allTicketsHTML += `
                    <div style="border: 3px solid #333; padding: 20px; margin-top: 30px; background: #f5f5f5; text-align: center;">
                        <h2 style="margin: 0; font-size: 24px;">TOTAL GENERAL</h2>
                        <p style="font-size: 28px; margin: 10px 0; font-weight: bold;">${totalGeneral.toFixed(2)}‚Ç¨</p>
                        <p style="margin: 5px 0;">Total de Pedidos: ${orders.length}</p>
                    </div>
                </div>
            `;

            // Crear una nueva ventana para imprimir
            const printWindow = window.open('', '_blank');
            if (printWindow) {
                printWindow.document.write(`
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Resumen de Pedidos - Bar Borja</title>
                        <style>
                            @media print {
                                body { margin: 0; padding: 20px; }
                                .no-print { display: none; }
                            }
                            body {
                                font-family: 'Courier New', monospace;
                                margin: 20px;
                            }
                            @page {
                                margin: 1cm;
                            }
                        </style>
                    </head>
                    <body>
                        <div class="no-print" style="text-align: center; margin-bottom: 20px;">
                            <button onclick="window.print()" style="padding: 10px 20px; font-size: 16px; cursor: pointer; background: #27ae60; color: white; border: none; border-radius: 5px;">
                                üñ®Ô∏è Imprimir
                            </button>
                            <button onclick="window.close()" style="padding: 10px 20px; font-size: 16px; cursor: pointer; background: #95a5a6; color: white; border: none; border-radius: 5px; margin-left: 10px;">
                                ‚úñÔ∏è Cerrar
                            </button>
                        </div>
                        ${allTicketsHTML}
                    </body>
                    </html>
                `);
                printWindow.document.close();
            }

            hideLoading();
        } catch (error) {
            console.error('Error al imprimir pedidos:', error);
            showToast('‚ùå Error al generar el resumen de pedidos', 'error');
            hideLoading();
        }
    };

    // Variables para pedidos a domicilio
    let pedidosDomicilio = [];
    let currentPaymentFilter = 'all';

    // Funciones para pedidos a domicilio
    async function loadPedidosDomicilio() {
        try {
            console.log('üè† Cargando pedidos a domicilio...');
            const { getPedidosDomicilio, getEstadisticasDomicilio } = await import('/src/functions/domicilio.js');
            
            // Cargar pedidos y estad√≠sticas
            const [pedidos, stats] = await Promise.all([
                getPedidosDomicilio(),
                getEstadisticasDomicilio()
            ]);

            pedidosDomicilio = pedidos || [];
            console.log('üì¶ Pedidos a domicilio cargados:', pedidosDomicilio.length);

            // Renderizar estad√≠sticas
            renderDomicilioStats(stats);
            
            // Filtrar y renderizar pedidos
            filterAndRenderDomicilio();
        } catch (error) {
            console.error('‚ùå Error loading delivery orders:', error);
            showToast('Error al cargar pedidos a domicilio', 'error');
            pedidosDomicilio = [];
        }
    }

    function renderDomicilioStats(stats) {
        const statsContainer = document.getElementById('domicilio-stats');
        if (!statsContainer) return;

        const statsHTML = `
            <div class="stat-card">
                <h4>Total Pedidos</h4>
                <div class="stat-value">${stats.total_pedidos || 0}</div>
            </div>
            <div class="stat-card paid">
                <h4>Pagados</h4>
                <div class="stat-value">${stats.pedidos_pagados || 0}</div>
            </div>
            <div class="stat-card pending">
                <h4>Pendientes</h4>
                <div class="stat-value">${stats.pedidos_pendientes || 0}</div>
            </div>
            <div class="stat-card">
                <h4>Ingresos Totales</h4>
                <div class="stat-value">${(stats.total_ingresos || 0).toFixed(2)}‚Ç¨</div>
            </div>
        `;

        statsContainer.innerHTML = statsHTML;
    }

    function filterAndRenderDomicilio() {
        console.log('üîç Filtrando pedidos a domicilio - Pago:', currentPaymentFilter);
        
        let filteredOrders = pedidosDomicilio;
        
        // Filter by payment status
        if (currentPaymentFilter === 'paid') {
            filteredOrders = filteredOrders.filter(order => order.is_paid);
        } else if (currentPaymentFilter === 'pending') {
            filteredOrders = filteredOrders.filter(order => !order.is_paid);
        }
        
        console.log('‚úÖ Pedidos a domicilio filtrados:', filteredOrders.length);
        renderDomicilioOrders(filteredOrders);
    }

    function renderDomicilioOrders(ordersToRender) {
        const container = document.getElementById('domicilio-orders-list');
        if (!container) return;
        
        if (!ordersToRender || ordersToRender.length === 0) {
            container.innerHTML = '<p class="no-data">No hay pedidos a domicilio disponibles</p>';
            return;
        }

        const ordersHTML = ordersToRender.map(order => {
            const products = order.productos || [];
            const orderDate = new Date(order.created_at).toLocaleString('es-ES');
            
            return `
                <div class="domicilio-order-card ${order.is_paid ? 'paid' : 'pending'}">
                    <div class="domicilio-timestamp">${orderDate}</div>
                    
                    <div class="domicilio-order-header">
                        <div class="domicilio-order-id">Pedido #${order.id}</div>
                        <div class="payment-status ${order.is_paid ? 'paid' : 'pending'}">
                            ${order.is_paid ? '‚úÖ Pagado' : 'üî¥ Pendiente'}
                        </div>
                    </div>

                    <div class="domicilio-customer-info">
                        <h4>üë§ Informaci√≥n del Cliente</h4>
                        <div class="customer-detail">
                            <strong>Nombre:</strong>
                            <span>${order.nombre} ${order.apellidos}</span>
                        </div>
                        <div class="customer-detail">
                            <strong>DNI:</strong>
                            <span>${order.dni}</span>
                        </div>
                        <div class="customer-detail">
                            <strong>Tel√©fono:</strong>
                            <span>${order.telefono}</span>
                        </div>
                        <div class="domicilio-address">
                            üìç <strong>Direcci√≥n:</strong><br>
                            ${order.direccion}
                        </div>
                    </div>

                    <div class="domicilio-products">
                        <h4>üçΩÔ∏è Productos</h4>
                        ${products.map(product => `
                            <div class="domicilio-product-item">
                                <div>
                                    <div class="product-item-name">${product.nombre}</div>
                                    <div class="product-item-qty">${product.cantidad}x ${product.precio}‚Ç¨</div>
                                </div>
                                <div class="product-item-price">${(product.cantidad * product.precio).toFixed(2)}‚Ç¨</div>
                            </div>
                        `).join('')}
                    </div>

                    <div class="domicilio-total">
                        üí∞ Total: ${order.total?.toFixed(2) || '0.00'}‚Ç¨
                    </div>

                    <div class="domicilio-actions">
                        ${!order.is_paid ? `
                            <button class="btn btn-success" onclick="confirmarPagoDomicilio(${order.id})">
                                üí≥ Confirmar Pago
                            </button>
                        ` : ''}
                        <button class="btn btn-info" onclick="imprimirPedidoDomicilio(${order.id})">
                            üñ®Ô∏è Imprimir
                        </button>
                        <button class="btn btn-danger" onclick="eliminarPedidoDomicilio(${order.id})">
                            üóëÔ∏è Eliminar
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = ordersHTML;
    }

    // Funciones globales para pedidos a domicilio
    window.confirmarPagoDomicilio = async function(pedidoId) {
        try {
            const confirmed = confirm('¬øConfirmar que este pedido ha sido pagado?');
            if (!confirmed) return;

            showLoading();
            const { updatePagoPedidoDomicilio } = await import('/src/functions/domicilio.js');
            
            const result = await updatePagoPedidoDomicilio(pedidoId, true);
            
            if (result) {
                showToast('‚úÖ Pago confirmado correctamente', 'success');
                await loadPedidosDomicilio();
            } else {
                showToast('‚ùå Error al confirmar el pago', 'error');
            }
        } catch (error) {
            console.error('Error confirmando pago:', error);
            showToast('‚ùå Error al confirmar el pago', 'error');
        } finally {
            hideLoading();
        }
    };

    window.eliminarPedidoDomicilio = async function(pedidoId) {
        try {
            const confirmed = confirm('¬øEst√°s seguro de que quieres eliminar este pedido? Esta acci√≥n no se puede deshacer.');
            if (!confirmed) return;

            showLoading();
            const { deletePedidoDomicilio } = await import('/src/functions/domicilio.js');
            
            const result = await deletePedidoDomicilio(pedidoId);
            
            if (result) {
                showToast('‚úÖ Pedido eliminado correctamente', 'success');
                await loadPedidosDomicilio();
            } else {
                showToast('‚ùå Error al eliminar el pedido', 'error');
            }
        } catch (error) {
            console.error('Error eliminando pedido:', error);
            showToast('‚ùå Error al eliminar el pedido', 'error');
        } finally {
            hideLoading();
        }
    };

    window.imprimirPedidoDomicilio = async function(pedidoId) {
        try {
            showLoading();
            const { getPedidoDomicilioById } = await import('/src/functions/domicilio.js');
            
            const pedido = await getPedidoDomicilioById(pedidoId);
            
            if (!pedido) {
                showToast('‚ùå Pedido no encontrado', 'error');
                return;
            }

            const products = pedido.productos || [];
            const orderDate = new Date(pedido.created_at).toLocaleString('es-ES');

            const ticketHTML = `
                <div style="font-family: 'Courier New', monospace; max-width: 300px; margin: 0 auto; padding: 20px;">
                    <div style="text-align: center; border-bottom: 2px dashed #333; padding-bottom: 10px; margin-bottom: 15px;">
                        <h2 style="margin: 0; font-size: 24px;">üè† Bar Borja</h2>
                        <p style="margin: 5px 0; font-size: 14px;"><strong>PEDIDO A DOMICILIO</strong></p>
                        <p style="margin: 5px 0; font-size: 12px;">Ticket #${pedido.id}</p>
                        <p style="margin: 5px 0; font-size: 12px;">${orderDate}</p>
                    </div>
                    
                    <div style="margin-bottom: 15px;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px; border-bottom: 1px solid #333;">DATOS CLIENTE</h3>
                        <p style="margin: 2px 0; font-size: 12px;"><strong>Nombre:</strong> ${pedido.nombre} ${pedido.apellidos}</p>
                        <p style="margin: 2px 0; font-size: 12px;"><strong>DNI:</strong> ${pedido.dni}</p>
                        <p style="margin: 2px 0; font-size: 12px;"><strong>Tel√©fono:</strong> ${pedido.telefono}</p>
                        <p style="margin: 8px 0 2px 0; font-size: 12px;"><strong>Direcci√≥n:</strong></p>
                        <p style="margin: 2px 0; font-size: 11px; border: 1px dashed #666; padding: 5px;">${pedido.direccion}</p>
                    </div>

                    <div style="margin-bottom: 15px;">
                        <h3 style="margin: 0 0 8px 0; font-size: 14px; border-bottom: 1px solid #333;">PRODUCTOS</h3>
                        ${products.map(product => `
                            <div style="display: flex; justify-content: space-between; margin: 3px 0; font-size: 11px;">
                                <span>${product.cantidad}x ${product.nombre}</span>
                                <span>${(product.cantidad * product.precio).toFixed(2)}‚Ç¨</span>
                            </div>
                        `).join('')}
                    </div>

                    <div style="border-top: 2px dashed #333; padding-top: 10px; text-align: center;">
                        <p style="margin: 5px 0; font-size: 16px; font-weight: bold;">
                            TOTAL: ${pedido.total?.toFixed(2) || '0.00'}‚Ç¨
                        </p>
                        <p style="margin: 8px 0; font-size: 12px; font-weight: bold;">
                            ${pedido.is_paid ? '‚úÖ PAGADO' : 'üî¥ PENDIENTE DE PAGO'}
                        </p>
                    </div>

                    <div style="text-align: center; margin-top: 20px; font-size: 10px; border-top: 1px dashed #333; padding-top: 10px;">
                        <p style="margin: 2px 0;">¬°Gracias por confiar en nosotros!</p>
                        <p style="margin: 2px 0;">Bar Borja - Servicio a Domicilio</p>
                    </div>
                </div>
            `;

            // Abrir nueva ventana para imprimir
            const printWindow = window.open('', '_blank');
            if (printWindow) {
                printWindow.document.write(`
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>Pedido a Domicilio #${pedido.id}</title>
                        <style>
                            @media print {
                                body { margin: 0; }
                                .no-print { display: none; }
                            }
                        </style>
                    </head>
                    <body>
                        <div class="no-print" style="text-align: center; margin-bottom: 20px;">
                            <button onclick="window.print()" style="padding: 10px 20px; font-size: 16px; cursor: pointer; background: #27ae60; color: white; border: none; border-radius: 5px;">
                                üñ®Ô∏è Imprimir
                            </button>
                            <button onclick="window.close()" style="padding: 10px 20px; font-size: 16px; cursor: pointer; background: #95a5a6; color: white; border: none; border-radius: 5px; margin-left: 10px;">
                                ‚úñÔ∏è Cerrar
                            </button>
                        </div>
                        ${ticketHTML}
                    </body>
                    </html>
                `);
                printWindow.document.close();
            }

            hideLoading();
        } catch (error) {
            console.error('Error al imprimir pedido:', error);
            showToast('‚ùå Error al generar el ticket', 'error');
            hideLoading();
        }
    };

    // Actualizar la funci√≥n switchTab para incluir domicilio
    async function switchTab(tabId) {
        if (!tabId) return;

        // Update tab buttons
        if (tabButtons && tabButtons.length) {
            tabButtons.forEach(btn => {
                if (btn && btn.classList) {
                    btn.classList.remove('active');
                }
            });
        }
        
        const activeButton = document.querySelector(`[data-tab="${tabId}"]`);
        if (activeButton && activeButton.classList) {
            activeButton.classList.add('active');
        }

        // Update tab content
        if (tabContents && tabContents.length) {
            tabContents.forEach(content => {
                if (content && content.classList) {
                    content.classList.remove('active');
                }
            });
        }
        
        const activeContent = document.getElementById(tabId);
        if (activeContent && activeContent.classList) {
            activeContent.classList.add('active');
        }

        // Load data for the active tab
        try {
            if (tabId === 'productos') {
                await loadProducts();
            } else if (tabId === 'pedidos') {
                await loadOrders();
            } else if (tabId === 'domicilio') {
                await loadPedidosDomicilio();
            } else if (tabId === 'pagos-barra') {
                await loadPagosEnBarra();
            }
        } catch (error) {
            console.error('Error switching tabs:', error);
            showToast('Error al cambiar de pesta√±a', 'error');
        }
    }

    // Event listeners para filtros de domicilio
    document.addEventListener('click', function(e) {
        // Existing code for other filters...
        
        // Payment filter functionality for domicilio
        if (e.target && e.target.classList && e.target.classList.contains('filter-btn') && e.target.hasAttribute('data-payment')) {
            const filterBtns = document.querySelectorAll('.domicilio-filters .filter-btn');
            const payment = e.target.getAttribute('data-payment');
            
            // Update active filter button
            filterBtns.forEach(btn => btn.classList.remove('active'));
            e.target.classList.add('active');
            
            // Update filter and re-render
            currentPaymentFilter = payment;
            filterAndRenderDomicilio();
        }
    });

    // Funciones para Pagos en Barra
    let pagosEnBarra = [];

    async function loadPagosEnBarra() {
        try {
            console.log('üîÑ Cargando pagos en barra pendientes...');
            const { supabase } = await import('/src/db/supabase.js');
            
            const { data, error } = await supabase
                .from('orders')
                .select(`
                    order_id,
                    table_number,
                    status,
                    total_amount,
                    created_at,
                    payment_method,
                    is_paid,
                    order_items (
                        order_item_id,
                        quantity,
                        price,
                        products (
                            product_id,
                            name,
                            type
                        )
                    )
                `)
                .eq('payment_method', 'efectivo')
                .eq('is_paid', false)
                .order('created_at', { ascending: false });
            
            if (error) {
                console.error('‚ùå Error fetching cash payments:', error);
                pagosEnBarra = [];
            } else {
                pagosEnBarra = data || [];
                console.log('üí∞ Pagos en barra cargados:', pagosEnBarra.length);
            }
            
            renderPagosEnBarra();
            updatePagosStats();
        } catch (error) {
            console.error('‚ùå Error loading cash payments:', error);
            showToast('Error al cargar los pagos en barra', 'error');
            pagosEnBarra = [];
        }
    }

    function renderPagosEnBarra() {
        const container = document.getElementById('pagos-barra-list');
        if (!container) return;
        
        if (!pagosEnBarra || pagosEnBarra.length === 0) {
            container.innerHTML = `
                <div class="no-data">
                    <div style="font-size: 64px; margin-bottom: 20px;">‚úÖ</div>
                    <h3 style="margin: 0 0 12px 0; color: #5d4e37; font-weight: 700; font-size: 1.5rem;">No hay pagos pendientes</h3>
                    <p style="margin: 0; color: #8b7355; font-size: 16px; line-height: 1.5;">Todos los pagos en efectivo est√°n confirmados</p>
                </div>
            `;
            return;
        }

        const pagosByMesa = pagosEnBarra.reduce((acc, pago) => {
            if (!acc[pago.table_number]) {
                acc[pago.table_number] = [];
            }
            acc[pago.table_number].push(pago);
            return acc;
        }, {});

        const pagosHTML = Object.entries(pagosByMesa).map(([mesa, orders]) => {
            const totalMesa = orders.reduce((sum, order) => sum + parseFloat(order.total_amount), 0);
            const fechaReciente = new Date(Math.max(...orders.map(o => new Date(o.created_at))));
            
            return `
                <div class="pago-barra-card">
                    <div class="pago-header">
                        <div class="mesa-info">
                            <h3>üçΩÔ∏è Mesa ${mesa}</h3>
                            <span class="pago-count">${orders.length} pedido${orders.length > 1 ? 's' : ''}</span>
                        </div>
                        <div class="pago-total">
                            <span class="total-amount">${totalMesa.toFixed(2)}‚Ç¨</span>
                            <span class="pago-date">${fechaReciente.toLocaleDateString('es-ES')} ${fechaReciente.toLocaleTimeString('es-ES', {hour: '2-digit', minute: '2-digit'})}</span>
                        </div>
                    </div>
                    
                    <div class="pago-orders">
                        ${orders.map(order => `
                            <div class="pago-order">
                                <div class="order-info">
                                    <span class="order-id">Pedido #${order.order_id}</span>
                                    <span class="order-amount">${parseFloat(order.total_amount).toFixed(2)}‚Ç¨</span>
                                </div>
                                <div class="order-items">
                                    ${order.order_items?.map(item => `
                                        <span class="item-detail">${item.quantity}x ${item.products?.name || 'Producto'}</span>
                                    `).join(', ') || 'Sin items'}
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    
                    <div class="pago-actions">
                        <button class="btn btn-success" onclick="confirmarPagoEnBarra(${mesa})">
                            ‚úÖ Confirmar Pago en Barra
                        </button>
                        <button class="btn btn-info" onclick="imprimirTicketMesa(${mesa})">
                            üñ®Ô∏è Reimprimir Ticket
                        </button>
                    </div>
                </div>
            `;
        }).join('');

        container.innerHTML = pagosHTML;
    }

    function updatePagosStats() {
        const statsContainer = document.getElementById('pagos-stats');
        if (!statsContainer) return;

        const totalPendientes = pagosEnBarra.length;
        const totalImporte = pagosEnBarra.reduce((sum, pago) => sum + parseFloat(pago.total_amount), 0);
        const mesasUnicas = new Set(pagosEnBarra.map(p => p.table_number)).size;

        statsContainer.innerHTML = `
            <div class="stat-card pending">
                <h4>Pedidos Pendientes</h4>
                <p class="stat-value">${totalPendientes}</p>
            </div>
            <div class="stat-card">
                <h4>Mesas con Pagos Pendientes</h4>
                <p class="stat-value">${mesasUnicas}</p>
            </div>
            <div class="stat-card">
                <h4>Importe Total Pendiente</h4>
                <p class="stat-value">${totalImporte.toFixed(2)}‚Ç¨</p>
            </div>
        `;
    }

    // Funci√≥n global para confirmar pago en barra
    window.confirmarPagoEnBarra = async function(mesa) {
        if (!confirm(`¬øConfirmar el pago en efectivo para la Mesa ${mesa}?`)) {
            return;
        }

        try {
            console.log(`üí∞ Confirmando pago en barra para Mesa ${mesa}...`);
            const { supabase } = await import('/src/db/supabase.js');
            
            // Actualizar todas las orders de esta mesa - SOLO marcar como pagado, mantener el status actual
            const { error } = await supabase
                .from('orders')
                .update({ 
                    is_paid: true
                })
                .eq('table_number', mesa)
                .eq('payment_method', 'efectivo')
                .eq('is_paid', false);

            if (error) {
                console.error('‚ùå Error confirmando pago:', error);
                showToast('Error al confirmar el pago', 'error');
                return;
            }

            console.log('‚úÖ Pago confirmado para Mesa', mesa);
            showToast(`‚úÖ Pago confirmado para Mesa ${mesa}`, 'success');
            
            // Recargar datos
            await loadPagosEnBarra();
            
        } catch (error) {
            console.error('‚ùå Error confirmando pago:', error);
            showToast('Error al confirmar el pago', 'error');
        }
    };

    // Funci√≥n global para reimprimir ticket
    window.imprimirTicketMesa = async function(mesa) {
        try {
            const ordersMesa = pagosEnBarra.filter(p => p.table_number === mesa);
            if (ordersMesa.length === 0) return;

            const ticketContent = generateTicketContent(mesa, ordersMesa);
            const printWindow = window.open('', '_blank');
            printWindow.document.write(ticketContent);
            printWindow.document.close();
            printWindow.print();
            
        } catch (error) {
            console.error('‚ùå Error imprimiendo ticket:', error);
            showToast('Error al imprimir el ticket', 'error');
        }
    };

    function generateTicketContent(mesa, orders) {
        const now = new Date();
        const totalAmount = orders.reduce((sum, order) => sum + parseFloat(order.total_amount), 0);
        
        let itemsHTML = '';
        orders.forEach(order => {
            if (order.order_items && order.order_items.length > 0) {
                order.order_items.forEach(item => {
                    const productName = item.products?.name || 'Producto';
                    itemsHTML += `
                        <tr>
                            <td>${item.quantity}x</td>
                            <td>${productName}</td>
                            <td style="text-align: right;">${(item.price * item.quantity).toFixed(2)}‚Ç¨</td>
                        </tr>
                    `;
                });
            }
        });

        return `
            <html>
                <head>
                    <title>Ticket Mesa ${mesa} - BarBorja</title>
                    <style>
                        body { font-family: Arial, sans-serif; max-width: 400px; margin: 0 auto; padding: 20px; }
                        .header { text-align: center; margin-bottom: 20px; border-bottom: 2px solid #000; padding-bottom: 15px; }
                        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                        th, td { padding: 8px 4px; text-align: left; }
                        .total-row { border-top: 2px solid #000; font-weight: bold; font-size: 18px; }
                        .status { color: orange; font-weight: bold; text-align: center; margin: 20px 0; }
                        .footer { text-align: center; margin-top: 30px; padding-top: 15px; border-top: 1px solid #ccc; }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>BarBorja</h1>
                        <p>Ticket de Pago</p>
                    </div>
                    
                    <div class="details">
                        <p><strong>Mesa:</strong> ${mesa}</p>
                        <p><strong>Fecha:</strong> ${now.toLocaleDateString('es-ES')}</p>
                        <p><strong>Hora:</strong> ${now.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}</p>
                        <p><strong>Pedidos:</strong> ${orders.length}</p>
                    </div>
                    
                    <div class="status">
                        ${orders.some(o => o.is_paid) ? 
                            '‚úÖ PAGADO' : 
                            '‚ö†Ô∏è PAGO PENDIENTE EN BARRA'
                        }
                    </div>
                    
                    <table>
                        <thead>
                            <tr>
                                <th>Cant.</th>
                                <th>Producto</th>
                                <th style="text-align: right;">Importe</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${itemsHTML}
                        </tbody>
                        <tfoot>
                            <tr class="total-row">
                                <td colspan="2">TOTAL</td>
                                <td style="text-align: right;">${totalAmount.toFixed(2)}‚Ç¨</td>
                            </tr>
                        </tfoot>
                    </table>
                    
                    <div class="footer">
                        <p style="color: orange; font-weight: bold;">üìç Presente este ticket en barra para completar el pago</p>
                        <p>¬°Gracias por su visita!</p>
                    </div>
                </body>
            </html>
        `;
    }
</script>