---
import Layout from '../../layouts/Layout.astro';
import { supabase } from '../../db/supabase.js';

// Obtener todos los tokens de mesa
const { data: tokens, error } = await supabase
    .from('mesa_tokens')
    .select('*')
    .order('mesa_numero');

if (error) {
    console.error('Error fetching mesa tokens:', error);
}
---

<Layout title="Gesti√≥n de QR - Mesas - BarBorja">
    <div class="admin-container">
        <div class="header">
            <h1>üîó Gesti√≥n de QR - Mesas</h1>
            <p>Genera y gestiona los c√≥digos QR √∫nicos para cada mesa</p>
            <a href="/admin" class="btn-back">‚Üê Volver al Admin</a>
        </div>

        <div class="actions-bar">
            <button class="btn btn-success" onclick="generateAllQRs()">
                üìã Generar Todos los QR
            </button>
            <button class="btn btn-warning" onclick="regenerateAllTokens()">
                üîÑ Regenerar Todos los Tokens
            </button>
        </div>

        <div class="tokens-grid">
            {tokens && tokens.map((token) => (
                <div class="token-card" data-mesa={token.mesa_numero}>
                    <div class="token-header">
                        <h3>Mesa {token.mesa_numero}</h3>
                        <div class={`status-badge ${token.activo ? 'active' : 'inactive'}`}>
                            {token.activo ? '‚úÖ Activo' : '‚ùå Inactivo'}
                        </div>
                    </div>
                    
                    <div class="token-info">
                        <div class="info-row">
                            <span class="label">Token:</span>
                            <code class="token-value" id={`token-${token.mesa_numero}`}>
                                {token.token}
                            </code>
                            <button class="btn-copy" onclick={`copyToken('${token.token}')`}>üìã</button>
                        </div>
                        
                        <div class="info-row">
                            <span class="label">URL:</span>
                            <code class="url-value" id={`url-${token.mesa_numero}`}>
                                {Astro.site || 'https://tu-dominio.com'}/mesa/access?token={token.token}
                            </code>
                            <button class="btn-copy" onclick={`copyURL('${token.mesa_numero}')`}>üìã</button>
                        </div>
                        
                        {token.last_accessed && (
                            <div class="info-row">
                                <span class="label">√öltimo acceso:</span>
                                <span class="date-value">
                                    {new Date(token.last_accessed).toLocaleString('es-ES')}
                                </span>
                            </div>
                        )}
                    </div>

                    <div class="token-actions">
                        <button class="btn btn-primary" onclick={`generateQR(${token.mesa_numero})`}>
                            üì± Generar QR
                        </button>
                        <button class="btn btn-secondary" onclick={`regenerateToken(${token.mesa_numero})`}>
                            üîÑ Nuevo Token
                        </button>
                        <button class={`btn ${token.activo ? 'btn-danger' : 'btn-success'}`} 
                                onclick={`toggleStatus(${token.mesa_numero}, ${token.activo})`}>
                            {token.activo ? 'üö´ Desactivar' : '‚úÖ Activar'}
                        </button>
                    </div>

                    <div class="qr-container" id={`qr-${token.mesa_numero}`} style="display: none;">
                        <canvas id={`qr-canvas-${token.mesa_numero}`}></canvas>
                        <div class="qr-actions">
                            <button class="btn btn-download" onclick={`downloadQR(${token.mesa_numero})`}>
                                ‚¨áÔ∏è Descargar PNG
                            </button>
                            <button class="btn btn-print" onclick={`printQR(${token.mesa_numero})`}>
                                üñ®Ô∏è Imprimir
                            </button>
                        </div>
                    </div>
                </div>
            ))}
        </div>
    </div>

    <div id="toast-container" class="toast-container"></div>
</Layout>

<style>
    .admin-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    .header {
        text-align: center;
        margin-bottom: 40px;
        padding: 30px;
        background: linear-gradient(135deg, #2c3e50, #34495e);
        color: white;
        border-radius: 15px;
    }

    .header h1 {
        margin: 0 0 10px 0;
        font-family: 'Georgia', serif;
        font-size: 2.5rem;
    }

    .header p {
        margin: 0 0 20px 0;
        opacity: 0.9;
        font-size: 1.1rem;
    }

    .btn-back {
        display: inline-block;
        background: rgba(255, 255, 255, 0.2);
        color: white;
        padding: 10px 20px;
        border-radius: 25px;
        text-decoration: none;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .btn-back:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateY(-2px);
    }

    .actions-bar {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
    }

    .btn-success {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
    }

    .btn-warning {
        background: linear-gradient(135deg, #f39c12, #e67e22);
        color: white;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
    }

    .btn-secondary {
        background: linear-gradient(135deg, #95a5a6, #7f8c8d);
        color: white;
    }

    .btn-danger {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
    }

    .btn-download {
        background: linear-gradient(135deg, #9b59b6, #8e44ad);
        color: white;
    }

    .btn-print {
        background: linear-gradient(135deg, #34495e, #2c3e50);
        color: white;
    }

    .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .tokens-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(450px, 1fr));
        gap: 25px;
    }

    .token-card {
        background: white;
        border: 2px solid #d4af37;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 15px rgba(212, 175, 55, 0.2);
        transition: transform 0.3s ease;
    }

    .token-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(212, 175, 55, 0.3);
    }

    .token-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #d4af37;
    }

    .token-header h3 {
        margin: 0;
        font-family: 'Georgia', serif;
        color: #2c3e50;
        font-size: 1.4rem;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: bold;
        color: white;
    }

    .status-badge.active {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
    }

    .status-badge.inactive {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
    }

    .token-info {
        margin-bottom: 20px;
    }

    .info-row {
        display: flex;
        align-items: center;
        margin-bottom: 12px;
        gap: 10px;
    }

    .label {
        font-weight: bold;
        color: #2c3e50;
        min-width: 80px;
        flex-shrink: 0;
    }

    .token-value, .url-value {
        background: #f8f9fa;
        padding: 8px 12px;
        border-radius: 6px;
        font-family: 'Courier New', monospace;
        font-size: 12px;
        color: #2c3e50;
        flex: 1;
        word-break: break-all;
        border: 1px solid #ddd;
    }

    .date-value {
        color: #666;
        font-size: 14px;
    }

    .btn-copy {
        background: #3498db;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 12px;
        transition: all 0.2s ease;
        flex-shrink: 0;
    }

    .btn-copy:hover {
        background: #2980b9;
    }

    .token-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .token-actions .btn {
        flex: 1;
        min-width: 120px;
        font-size: 12px;
        padding: 10px 16px;
    }

    .qr-container {
        margin-top: 20px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        text-align: center;
        border: 2px dashed #d4af37;
    }

    .qr-container canvas {
        max-width: 200px;
        height: auto;
        margin-bottom: 15px;
    }

    .qr-actions {
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .qr-actions .btn {
        font-size: 12px;
        padding: 8px 16px;
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
    }

    .toast {
        background: white;
        border-left: 4px solid #27ae60;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        animation: slideIn 0.3s ease;
        min-width: 300px;
    }

    .toast.error {
        border-left-color: #e74c3c;
    }

    .toast.warning {
        border-left-color: #f39c12;
    }

    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    @media (max-width: 768px) {
        .tokens-grid {
            grid-template-columns: 1fr;
        }

        .actions-bar {
            flex-direction: column;
            align-items: center;
        }

        .token-actions {
            flex-direction: column;
        }

        .token-actions .btn {
            min-width: auto;
        }

        .info-row {
            flex-direction: column;
            align-items: flex-start;
            gap: 5px;
        }

        .label {
            min-width: auto;
        }

        .qr-actions {
            flex-direction: column;
        }
    }
</style>

<script>
    import { supabase } from '../../lib/supabase.js';

    // Funci√≥n para mostrar toast
    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        
        toastContainer.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 4000);
    }

    // Copiar token al portapapeles
    window.copyToken = function(token) {
        navigator.clipboard.writeText(token).then(() => {
            showToast('Token copiado al portapapeles', 'success');
        }).catch(() => {
            showToast('Error al copiar token', 'error');
        });
    }

    // Copiar URL al portapapeles
    window.copyURL = function(mesaNumero) {
        const urlElement = document.getElementById(`url-${mesaNumero}`);
        const url = urlElement.textContent.trim();
        
        navigator.clipboard.writeText(url).then(() => {
            showToast('URL copiada al portapapeles', 'success');
        }).catch(() => {
            showToast('Error al copiar URL', 'error');
        });
    }

    // Generar QR para una mesa espec√≠fica
    window.generateQR = async function(mesaNumero) {
        try {
            const tokenElement = document.getElementById(`token-${mesaNumero}`);
            const token = tokenElement.textContent.trim();
            const url = `${window.location.origin}/mesa/access?token=${token}`;

            // Mostrar el contenedor del QR
            const qrContainer = document.getElementById(`qr-${mesaNumero}`);
            qrContainer.style.display = 'block';

            // Generar QR usando una librer√≠a (necesitar√°s incluir qrcode.js)
            const canvas = document.getElementById(`qr-canvas-${mesaNumero}`);
            
            // Si no tienes la librer√≠a QR, mostrar mensaje
            if (typeof QRCode === 'undefined') {
                canvas.style.display = 'none';
                qrContainer.innerHTML = `
                    <div style="padding: 20px; text-align: center;">
                        <p><strong>QR para Mesa ${mesaNumero}</strong></p>
                        <p style="font-family: monospace; font-size: 12px; word-break: break-all; background: #f0f0f0; padding: 10px; border-radius: 5px;">${url}</p>
                        <p style="color: #666; font-size: 12px;">Nota: Para generar el c√≥digo QR visual, necesitas incluir la librer√≠a qrcode.js</p>
                        <div class="qr-actions">
                            <button class="btn btn-download" onclick="downloadQRText(${mesaNumero}, '${url}')">
                                üìÑ Descargar Texto
                            </button>
                        </div>
                    </div>
                `;
            } else {
                // Generar QR real si la librer√≠a est√° disponible
                QRCode.toCanvas(canvas, url, {
                    width: 200,
                    margin: 2,
                    color: {
                        dark: '#2c3e50',
                        light: '#ffffff'
                    }
                });
            }

            showToast(`QR generado para Mesa ${mesaNumero}`, 'success');
        } catch (error) {
            console.error('Error generating QR:', error);
            showToast('Error al generar QR', 'error');
        }
    }

    // Descargar QR como texto (fallback)
    window.downloadQRText = function(mesaNumero, url) {
        const content = `Mesa ${mesaNumero} - BarBorja\nURL de acceso:\n${url}\n\nEscanea este c√≥digo con tu tel√©fono o visita la URL directamente.`;
        const blob = new Blob([content], { type: 'text/plain' });
        const downloadUrl = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = `mesa-${mesaNumero}-qr.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(downloadUrl);
        
        showToast(`Informaci√≥n de QR descargada para Mesa ${mesaNumero}`, 'success');
    }

    // Descargar QR como imagen
    window.downloadQR = function(mesaNumero) {
        const canvas = document.getElementById(`qr-canvas-${mesaNumero}`);
        if (canvas) {
            const link = document.createElement('a');
            link.download = `mesa-${mesaNumero}-qr.png`;
            link.href = canvas.toDataURL();
            link.click();
            showToast(`QR descargado para Mesa ${mesaNumero}`, 'success');
        }
    }

    // Imprimir QR
    window.printQR = function(mesaNumero) {
        const qrContainer = document.getElementById(`qr-${mesaNumero}`);
        const canvas = document.getElementById(`qr-canvas-${mesaNumero}`);
        
        if (canvas) {
            const printWindow = window.open('', '_blank');
            printWindow.document.write(`
                <html>
                    <head>
                        <title>Mesa ${mesaNumero} - QR Code</title>
                        <style>
                            body { text-align: center; font-family: Arial, sans-serif; margin: 40px; }
                            h1 { color: #2c3e50; margin-bottom: 20px; }
                            .qr-code { margin: 20px 0; }
                            .instructions { margin-top: 20px; color: #666; font-size: 14px; }
                        </style>
                    </head>
                    <body>
                        <h1>Mesa ${mesaNumero} - BarBorja</h1>
                        <div class="qr-code">
                            <img src="${canvas.toDataURL()}" alt="QR Code Mesa ${mesaNumero}">
                        </div>
                        <div class="instructions">
                            <p>Escanea este c√≥digo QR con tu tel√©fono para acceder al men√∫</p>
                            <p><strong>¬°Bienvenido a BarBorja!</strong></p>
                        </div>
                    </body>
                </html>
            `);
            printWindow.document.close();
            printWindow.print();
        }
    }

    // Regenerar token para una mesa
    window.regenerateToken = async function(mesaNumero) {
        if (!confirm(`¬øEst√°s seguro de regenerar el token para Mesa ${mesaNumero}? El QR actual dejar√° de funcionar.`)) {
            return;
        }

        try {
            // Generar nuevo token
            const newToken = `mesa_${mesaNumero}_${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;
            
            const { error } = await supabase
                .from('mesa_tokens')
                .update({ 
                    token: newToken,
                    updated_at: new Date().toISOString()
                })
                .eq('mesa_numero', mesaNumero);

            if (error) throw error;

            // Actualizar la interfaz
            document.getElementById(`token-${mesaNumero}`).textContent = newToken;
            document.getElementById(`url-${mesaNumero}`).textContent = 
                `${window.location.origin}/mesa/access?token=${newToken}`;

            // Ocultar QR anterior
            const qrContainer = document.getElementById(`qr-${mesaNumero}`);
            qrContainer.style.display = 'none';

            showToast(`Token regenerado para Mesa ${mesaNumero}`, 'success');
        } catch (error) {
            console.error('Error regenerating token:', error);
            showToast('Error al regenerar token', 'error');
        }
    }

    // Alternar estado activo/inactivo
    window.toggleStatus = async function(mesaNumero, currentStatus) {
        const newStatus = !currentStatus;
        const action = newStatus ? 'activar' : 'desactivar';

        if (!confirm(`¬øEst√°s seguro de ${action} el acceso a Mesa ${mesaNumero}?`)) {
            return;
        }

        try {
            const { error } = await supabase
                .from('mesa_tokens')
                .update({ 
                    activo: newStatus,
                    updated_at: new Date().toISOString()
                })
                .eq('mesa_numero', mesaNumero);

            if (error) throw error;

            // Actualizar la interfaz
            const statusBadge = document.querySelector(`[data-mesa="${mesaNumero}"] .status-badge`);
            const toggleBtn = document.querySelector(`[data-mesa="${mesaNumero}"] button[onclick*="toggleStatus"]`);
            
            if (newStatus) {
                statusBadge.className = 'status-badge active';
                statusBadge.textContent = '‚úÖ Activo';
                toggleBtn.className = 'btn btn-danger';
                toggleBtn.textContent = 'üö´ Desactivar';
            } else {
                statusBadge.className = 'status-badge inactive';
                statusBadge.textContent = '‚ùå Inactivo';
                toggleBtn.className = 'btn btn-success';
                toggleBtn.textContent = '‚úÖ Activar';
            }

            showToast(`Mesa ${mesaNumero} ${newStatus ? 'activada' : 'desactivada'}`, 'success');
        } catch (error) {
            console.error('Error toggling status:', error);
            showToast('Error al cambiar estado', 'error');
        }
    }

    // Generar todos los QRs
    window.generateAllQRs = async function() {
        if (!confirm('¬øGenerar QRs para todas las mesas? Esto puede tardar un momento.')) {
            return;
        }

        const tokenCards = document.querySelectorAll('.token-card');
        for (const card of tokenCards) {
            const mesaNumero = parseInt(card.dataset.mesa);
            await generateQR(mesaNumero);
            // Peque√±a pausa para no sobrecargar
            await new Promise(resolve => setTimeout(resolve, 100));
        }

        showToast('QRs generados para todas las mesas', 'success');
    }

    // Regenerar todos los tokens
    window.regenerateAllTokens = async function() {
        if (!confirm('¬øREGENERAR TODOS LOS TOKENS? Todos los QRs actuales dejar√°n de funcionar. Esta acci√≥n no se puede deshacer.')) {
            return;
        }

        try {
            const tokenCards = document.querySelectorAll('.token-card');
            
            for (const card of tokenCards) {
                const mesaNumero = parseInt(card.dataset.mesa);
                await regenerateToken(mesaNumero);
                // Peque√±a pausa para no sobrecargar la BD
                await new Promise(resolve => setTimeout(resolve, 200));
            }

            showToast('Todos los tokens han sido regenerados', 'warning');
        } catch (error) {
            console.error('Error regenerating all tokens:', error);
            showToast('Error al regenerar tokens', 'error');
        }
    }

    // Incluir librer√≠a QR Code si est√° disponible
    document.addEventListener('DOMContentLoaded', function() {
        // Intentar cargar la librer√≠a QR desde CDN
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/qrcode@1.5.3/build/qrcode.min.js';
        script.onload = function() {
            console.log('‚úÖ Librer√≠a QR Code cargada');
        };
        script.onerror = function() {
            console.warn('‚ö†Ô∏è No se pudo cargar la librer√≠a QR Code. Se usar√° modo texto.');
        };
        document.head.appendChild(script);
    });
</script>
</Layout>