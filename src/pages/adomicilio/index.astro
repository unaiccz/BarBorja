---
import Layout from '../../layouts/Layout.astro';
import { getProducts } from '../../functions/products.js';

const products = await getProducts();
---

<Layout title="Pedidos a Domicilio - BarBorja">
    <div class="domicilio-header">
        <h1>üè† Pedidos a Domicilio</h1>
        <p class="domicilio-subtitle">Haz tu pedido y te lo llevamos a tu puerta</p>
        <div class="delivery-info">
            <span class="delivery-badge">üöö Entrega Gratuita</span>
        </div>
    </div>

    <div class="carta-container">
        <div class="section-header">
            <h2>Nuestra Carta</h2>
            <div class="delivery-info-badge">
                <span class="info-badge">üìç Servicio a Domicilio</span>
            </div>
        </div>

        <div class="productos-grid">
                {products && products.length > 0 ? (
                    products.map((product) => (
                        <div class="product-card">
                            {product.image_url && (
                                <div class="product-image">
                                    <img src={product.image_url} alt={product.name} />
                                </div>
                            )}
                            <div class="product-header">
                                <h3>{product.name}</h3>
                                <div class={`type-badge ${product.type}`}>
                                    {product.type === 'cocina' ? 'üç≥ Cocina' : 'üç∫ Barra'}
                                </div>
                            </div>

                            <div class="product-price">{product.price}‚Ç¨</div>

                            <div class="product-stock">
                                <span class={`stock-indicator ${product.stock > 10 ? 'high' : product.stock > 0 ? 'low' : 'out'}`} id={`stock-${product.product_id}`} data-stock={product.stock}>
                                    üì¶ Stock: <span id={`stock-value-${product.product_id}`}>{product.stock || 0}</span>
                                </span>
                            </div>

                            {product.description && (
                                <p class="product-description">"{product.description}"</p>
                            )}

                            <div class="product-actions">
                                <div class="quantity-controls">
                                    <button class="qty-btn" onclick={`decreaseQuantity(${product.product_id})`} disabled={product.stock === 0}>-</button>
                                    <span class="quantity" id={`qty-${product.product_id}`}>0</span>
                                    <button class="qty-btn" onclick={`increaseQuantity(${product.product_id}, ${product.stock})`} disabled={product.stock === 0}>+</button>
                                </div>
                                <button class="add-btn" onclick={`addToOrder(${product.product_id}, "${product.name}", ${product.price}, "${product.type}", ${product.stock})`} disabled={product.stock === 0}>
                                    {product.stock > 0 ? 'Agregar' : 'Sin Stock'}
                                </button>
                            </div>
                        </div>
                    ))
                ) : (
                    <div class="no-products">
                        <h3>No hay productos disponibles</h3>
                        <p>Estamos preparando nuestra carta para ti.</p>
                    </div>
                )}
            </div>
        </div>
    </div>

        <!-- Carrito -->
        <div class="cart-section" id="cart-section">
            <div class="cart-header">
                <h3>üõí Tu Pedido</h3>
                <button class="cart-toggle" id="cart-toggle">‚ñº</button>
            </div>
            <div class="cart-content" id="cart-content">
                <div class="cart-items" id="cart-items">
                    <p style="text-align: center; color: #666;">Tu carrito est√° vac√≠o</p>
                </div>
                <div class="cart-total">
                    <div class="total-line">
                        <span>Total: </span>
                        <span class="total-amount" id="total-amount">0.00‚Ç¨</span>
                    </div>
                </div>
                <div class="cart-actions">
                    <button class="btn btn-primary" onclick="showOrderForm()">
                        Continuar con el Pedido
                    </button>
                    <button class="btn btn-secondary" onclick="limpiarCarrito()">
                        Limpiar
                    </button>
                </div>
            </div>
        </div>

        <!-- Modal del Formulario de Pedido -->
        <div id="order-modal" class="modal hidden">
            <div class="modal-content order-modal">
                <div class="modal-header">
                    <h2>üìù Datos de Entrega</h2>
                    <button class="close-btn" id="close-order-modal">‚úï</button>
                </div>

                <div class="order-summary">
                    <h3>Resumen del Pedido</h3>
                    <div id="order-summary-items"></div>
                    <div class="order-total">
                        <strong>Total: <span id="order-total-amount">0.00‚Ç¨</span></strong>
                    </div>
                </div>

                <form id="order-form" class="order-form">
                    <div class="form-section">
                        <h3>üë§ Informaci√≥n Personal</h3>
                        <div class="form-grid">
                            <div class="form-group">
                                <label for="nombre">Nombre *</label>
                                <input type="text" id="nombre" name="nombre" required>
                            </div>
                            <div class="form-group">
                                <label for="apellidos">Apellidos *</label>
                                <input type="text" id="apellidos" name="apellidos" required>
                            </div>
                            <div class="form-group">
                                <label for="dni">DNI/NIF *</label>
                                <input type="text" id="dni" name="dni" required pattern="[0-9]{8}[A-Za-z]">
                            </div>
                            <div class="form-group">
                                <label for="telefono">Tel√©fono *</label>
                                <input type="tel" id="telefono" name="telefono" required pattern="[0-9]{9}">
                            </div>
                        </div>
                    </div>

                    <div class="form-section">
                        <h3>üìç Direcci√≥n de Entrega</h3>
                        <div class="form-group">
                            <label for="direccion">Direcci√≥n Completa *</label>
                            <textarea id="direccion" name="direccion" rows="3" required
                                placeholder="Calle, n√∫mero, piso, c√≥digo postal, ciudad..."></textarea>
                        </div>
                    </div>

                    <div class="form-section">
                        <h3>üí≥ M√©todo de Pago</h3>
                        <div class="payment-methods">
                            <div class="payment-method">
                                <input type="radio" id="pago-tarjeta" name="metodo_pago" value="tarjeta" checked onchange="toggleCardElement()">
                                <label for="pago-tarjeta">
                                    üí≥ Pagar con Tarjeta
                                    <small style="display: block; color: #666; font-size: 0.8rem; margin-top: 4px;">
                                        ‚úÖ Pago inmediato - Procesado por Stripe
                                    </small>
                                </label>
                            </div>
                            <div class="payment-method">
                                <input type="radio" id="pago-efectivo" name="metodo_pago" value="efectivo" onchange="toggleCardElement()">
                                <label for="pago-efectivo">
                                    üíµ Pago contra reembolso (efectivo/tarjeta en la entrega)
                                    <small style="display: block; color: #666; font-size: 0.8rem; margin-top: 4px;">
                                        ‚è≥ Pago pendiente - Se confirma en la entrega
                                    </small>
                                </label>
                            </div>
                        </div>

                        <!-- Contenedor para el elemento de tarjeta de Stripe -->
                        <div id="card-element-container" style="display: block; margin-top: 1rem;">
                            <h4 style="margin-bottom: 0.5rem; color: #333;">Datos de la Tarjeta</h4>
                            <div id="card-element" style="padding: 10px; border: 1px solid #ddd; border-radius: 4px; background: white;">
                                <!-- Stripe Elements crear√° el formulario de tarjeta aqu√≠ -->
                            </div>
                            <div id="card-errors" role="alert" style="color: #fa755a; margin-top: 0.5rem;"></div>
                        </div>
                        
                        <div class="payment-notice">
                            <p>‚ö†Ô∏è <strong>Importante:</strong> El pedido se confirmar√° √∫nicamente despu√©s de verificar el pago.</p>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-success">
                            üì§ Enviar Pedido
                        </button>
                        <button type="button" class="btn btn-secondary" id="cancel-order">
                            Cancelar
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal de Confirmaci√≥n -->
        <div id="confirmation-modal" class="modal hidden">
            <div class="modal-content">
                <h2>‚úÖ Pedido Recibido</h2>
                <div id="confirmation-content">
                    <p>Tu pedido ha sido registrado correctamente.</p>
                    <p><strong>ID del Pedido:</strong> <span id="pedido-id"></span></p>
                    <p>Te contactaremos pronto para confirmar el pago y coordinar la entrega.</p>
                </div>
                <div class="modal-actions">
                    <button class="btn btn-primary" id="back-to-home">
                        Volver al Inicio
                    </button>
                </div>
            </div>
        </div>

        <div id="toast-container" class="toast-container"></div>
    </div>
</Layout>

<style>
    .domicilio-header {
        text-align: center;
        padding: 30px 20px;
        background: linear-gradient(135deg, #d4af37, #f1c40f);
        color: white;
        margin-bottom: 30px;
        position: relative;
    }

    .domicilio-header h1 {
        font-size: 2.5rem;
        margin: 0;
        font-family: 'Georgia', serif;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .domicilio-subtitle {
        font-size: 1.2rem;
        margin: 10px 0 15px 0;
        opacity: 0.95;
        font-weight: 300;
    }

    .delivery-info {
        margin-top: 15px;
    }

    .delivery-badge {
        display: inline-block;
        background: rgba(255, 255, 255, 0.2);
        color: white;
        padding: 8px 20px;
        border-radius: 25px;
        font-weight: bold;
        font-size: 14px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        backdrop-filter: blur(10px);
    }

    .carta-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding-bottom: 15px;
        border-bottom: 2px solid #d4af37;
    }

    .section-header h2 {
        font-family: 'Georgia', serif;
        color: #2c3e50;
        margin: 0;
        font-size: 2rem;
    }

    .info-badge {
        background: linear-gradient(135deg, #e67e22, #d35400);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: bold;
        font-size: 14px;
        box-shadow: 0 2px 8px rgba(230, 126, 34, 0.3);
    }

    .productos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 25px;
        margin-bottom: 100px;
    }

    .product-image {
        width: 100%;
        height: 180px;
        overflow: hidden;
        border-radius: 12px;
        margin-bottom: 15px;
        background: linear-gradient(135deg, #f5f1e8, #faf7f0);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image img {
        transform: scale(1.05);
    }

    .product-card {
        background: white;
        border: 2px solid #d4af37;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 4px 15px rgba(212, 175, 55, 0.2);
        transition: transform 0.3s ease;
    }

    .product-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(212, 175, 55, 0.3);
    }

    .product-image {
        width: 100%;
        height: 180px;
        overflow: hidden;
        border-radius: 12px;
        margin-bottom: 15px;
        background: linear-gradient(135deg, #f5f1e8, #faf7f0);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .product-card:hover .product-image img {
        transform: scale(1.05);
    }

    .product-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px dotted #d4af37;
    }

    .product-header h3 {
        margin: 0;
        font-family: 'Georgia', serif;
        color: #2c3e50;
        font-size: 1.3rem;
    }

    .type-badge {
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 11px;
        font-weight: bold;
        color: white;
    }

    .type-badge.cocina {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
    }

    .type-badge.barra {
        background: linear-gradient(135deg, #3498db, #2980b9);
    }

    .product-price {
        font-size: 1.8rem;
        font-weight: bold;
        color: #d4af37;
        text-align: center;
        margin: 15px 0;
        font-family: 'Georgia', serif;
    }

    .product-stock {
        text-align: center;
        margin: 10px 0;
    }

    .stock-indicator {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stock-indicator.high {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
    }

    .stock-indicator.low {
        background: linear-gradient(135deg, #f39c12, #e67e22);
        color: white;
    }

    .stock-indicator.out {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        color: white;
    }

    .product-description {
        font-style: italic;
        color: #5d4e37;
        text-align: center;
        margin: 15px 0;
        line-height: 1.5;
    }

    .product-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px dotted #d4af37;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .qty-btn {
        width: 35px;
        height: 35px;
        border: 2px solid #d4af37;
        background: white;
        color: #d4af37;
        border-radius: 50%;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .qty-btn:hover {
        background: #d4af37;
        color: white;
    }

    .quantity {
        font-size: 18px;
        font-weight: bold;
        color: #2c3e50;
        min-width: 30px;
        text-align: center;
    }

    .add-btn {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .add-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(39, 174, 96, 0.3);
    }

    .cart-section {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: white;
        border: 2px solid #d4af37;
        border-radius: 15px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
        max-width: 350px;
        z-index: 1000;
    }

    .cart-header {
        background: #d4af37;
        color: white;
        padding: 15px;
        border-radius: 13px 13px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
    }

    .cart-header h3 {
        margin: 0;
        font-size: 16px;
    }

    .cart-toggle {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
    }

    .cart-content {
        padding: 15px;
        max-height: 400px;
        overflow-y: auto;
    }

    .cart-content.collapsed {
        display: none;
    }

    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }

    .cart-item:last-child {
        border-bottom: none;
    }

    .item-info {
        flex: 1;
    }

    .item-name {
        font-weight: bold;
        color: #2c3e50;
    }

    .item-details {
        font-size: 12px;
        color: #666;
    }

    .item-actions {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .cart-total {
        border-top: 2px solid #d4af37;
        padding-top: 15px;
        margin-top: 15px;
    }

    .total-line {
        display: flex;
        justify-content: space-between;
        font-size: 18px;
        font-weight: bold;
        color: #2c3e50;
    }

    .cart-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .btn {
        flex: 1;
        padding: 12px;
        border: none;
        border-radius: 8px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-primary {
        background: #27ae60;
        color: white;
    }

    .btn-primary:hover {
        background: #2ecc71;
    }

    .btn-secondary {
        background: #95a5a6;
        color: white;
    }

    .btn-secondary:hover {
        background: #7f8c8d;
    }

    .btn-success {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        font-weight: bold;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
    }

    .btn-success:hover {
        background: linear-gradient(135deg, #229954, #27ae60);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
        backdrop-filter: blur(5px);
    }

    .modal.hidden {
        display: none;
    }

    .modal-content {
        background: white;
        padding: 30px;
        border-radius: 20px;
        max-width: 600px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
        border: 2px solid #d4af37;
    }

    .order-modal {
        max-width: 700px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        padding-bottom: 20px;
        border-bottom: 3px solid #d4af37;
        background: linear-gradient(135deg, #fef9e7, #fdf6e3);
        margin: -30px -30px 25px -30px;
        padding: 20px 30px;
        border-radius: 20px 20px 0 0;
    }

    .modal-header h2 {
        margin: 0;
        color: #2c3e50;
        font-family: 'Georgia', serif;
        font-size: 1.5rem;
    }

    .close-btn {
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: white;
        padding: 8px;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
        box-shadow: 0 2px 8px rgba(231, 76, 60, 0.3);
    }

    .close-btn:hover {
        background: linear-gradient(135deg, #c0392b, #a93226);
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(231, 76, 60, 0.4);
    }

    .order-summary {
        background: linear-gradient(135deg, #fef9e7, #fdf6e3);
        padding: 25px;
        border-radius: 15px;
        margin-bottom: 30px;
        border: 2px solid #d4af37;
        box-shadow: 0 4px 15px rgba(212, 175, 55, 0.2);
    }

    .order-summary h3 {
        margin-top: 0;
        color: #2c3e50;
    }

    .order-summary-items {
        margin-bottom: 15px;
    }

    .order-summary-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid #dee2e6;
    }

    .order-total {
        text-align: right;
        font-size: 1.2rem;
        color: #d4af37;
    }

    .order-form {
        margin-top: 25px;
    }

    .form-section {
        margin-bottom: 30px;
        padding: 25px;
        background: linear-gradient(135deg, #fefefe, #fafafa);
        border-radius: 15px;
        border: 2px solid #e9ecef;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .form-section h3 {
        margin-top: 0;
        margin-bottom: 20px;
        color: #2c3e50;
        font-size: 1.3rem;
        font-family: 'Georgia', serif;
        border-bottom: 2px solid #d4af37;
        padding-bottom: 10px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 15px;
        margin-top: 15px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #2c3e50;
    }

    .form-group input,
    .form-group textarea,
    .form-group select {
        width: 100%;
        padding: 10px;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.3s ease;
        box-sizing: border-box;
    }

    .form-group input:focus,
    .form-group textarea:focus,
    .form-group select:focus {
        outline: none;
        border-color: #d4af37;
        box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.1);
    }

    .payment-methods {
        margin-top: 15px;
    }

    .payment-method {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 15px;
        background: white;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .payment-method input[type="radio"] {
        margin: 0;
    }

    .payment-method label {
        margin: 0;
        cursor: pointer;
        flex: 1;
    }

    .payment-notice {
        margin-top: 15px;
        padding: 15px;
        background: #fff3cd;
        border: 1px solid #ffc107;
        border-radius: 8px;
    }

    .payment-notice p {
        margin: 0;
        color: #856404;
        font-size: 14px;
    }

    .form-actions {
        display: flex;
        gap: 20px;
        justify-content: center;
        align-items: center;
        margin-top: 30px;
        padding-top: 25px;
        border-top: 2px solid #f0f0f0;
        width: 100%;
    }

    .form-actions .btn {
        flex: 0 0 auto;
        min-width: 160px;
        padding: 15px 25px;
        font-size: 16px;
        border-radius: 8px;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        border: none;
        white-space: nowrap;
        text-transform: none;
    }

    .btn-success {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
        box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
        font-weight: 600;
        letter-spacing: 0.3px;
    }

    .btn-success:hover:not(:disabled) {
        background: linear-gradient(135deg, #229954, #27ae60);
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(39, 174, 96, 0.4);
    }

    .btn-success:disabled {
        background: #bdc3c7;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
        opacity: 0.7;
    }

    .btn-secondary {
        background: #95a5a6;
        color: white;
        border: 2px solid transparent;
    }

    .btn-secondary:hover {
        background: #7f8c8d;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(149, 165, 166, 0.3);
    }

    .payment-notice {
        margin-top: 20px;
        padding: 15px;
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        color: #856404;
    }

    .payment-notice p {
        margin: 0;
        font-size: 14px;
        text-align: center;
    }

    .modal-actions {
        margin-top: 20px;
        text-align: center;
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
    }

    .toast {
        background: white;
        border-left: 4px solid #27ae60;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        animation: slideIn 0.3s ease;
    }

    .toast.error {
        border-left-color: #e74c3c;
    }

    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    button:disabled {
        background: #bdc3c7 !important;
        cursor: not-allowed !important;
        opacity: 0.6;
        transform: none !important;
    }

    button:disabled:hover {
        background: #bdc3c7 !important;
        transform: none !important;
    }

    .no-products {
        grid-column: 1 / -1;
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    @media (max-width: 768px) {
        .domicilio-header h1 {
            font-size: 2rem;
        }
        
        .section-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }
        
        .productos-grid {
            grid-template-columns: 1fr;
            gap: 20px;
        }
        
        .cart-section {
            left: 10px;
            right: 10px;
            max-width: none;
            bottom: 10px;
        }
        
        .product-actions {
            flex-direction: column;
            gap: 15px;
        }
        
        .form-grid {
            grid-template-columns: 1fr;
        }
        
        .form-actions {
            justify-content: center;
            flex-direction: column;
            gap: 15px;
            margin-top: 25px;
            padding-top: 20px;
        }
        
        .form-actions .btn {
            width: 100%;
            max-width: 280px;
            min-width: auto;
            padding: 16px 20px;
            font-size: 16px;
            margin: 0 auto;
        }
        
        .modal-content {
            width: 95%;
            padding: 20px;
            margin: 10px;
        }
        
        .modal-header {
            margin: -20px -20px 20px -20px;
            padding: 15px 20px;
        }
    }
</style>

<script is:inline src="https://js.stripe.com/v3/"></script>

<script>
    // Declare Stripe on window for TypeScript
    declare global {
        interface Window {
            Stripe: any;
        }
    }

    // Los imports se har√°n din√°micamente dentro de las funciones

    let cart = [];
    let cartVisible = true;

    function increaseQuantity(productId, maxStock = Infinity) {
        const qtyElement = document.getElementById(`qty-${productId}`);
        let currentQty = parseInt(qtyElement.textContent);

        if (currentQty < maxStock) {
            qtyElement.textContent = currentQty + 1;
        } else {
            showToast(`Stock m√°ximo disponible: ${maxStock}`, 'error');
        }
    }

    function decreaseQuantity(productId) {
        const qtyElement = document.getElementById(`qty-${productId}`);
        let currentQty = parseInt(qtyElement.textContent);
        if (currentQty > 0) {
            qtyElement.textContent = currentQty - 1;
        }
    }

    function addToOrder(productId, productName, price, productType, stock = 0) {
        console.log('üõí Agregando producto:', { productId, productName, price, productType, stock });
        
        const qtyElement = document.getElementById(`qty-${productId}`);
        if (!qtyElement) {
            console.error('‚ùå No se encontr√≥ el elemento de cantidad para el producto:', productId);
            showToast('Error: No se pudo encontrar la cantidad del producto', 'error');
            return;
        }

        const quantity = parseInt(qtyElement.textContent);
        console.log('üì¶ Cantidad seleccionada:', quantity);

        if (stock === 0) {
            showToast('Producto sin stock disponible', 'error');
            return;
        }

        if (quantity === 0) {
            showToast('Selecciona una cantidad mayor a 0', 'error');
            return;
        }

        if (quantity > stock) {
            showToast(`Stock insuficiente. Disponible: ${stock}`, 'error');
            return;
        }

        const existingItem = cart.find(item => item.productId === productId);

        if (existingItem && (existingItem.quantity + quantity) > stock) {
            showToast(`No puedes agregar m√°s. Ya tienes ${existingItem.quantity} en el carrito. Stock disponible: ${stock}`, 'error');
            return;
        }

        if (existingItem) {
            existingItem.quantity += quantity;
            console.log('üìà Producto existente actualizado:', existingItem);
        } else {
            const newItem = {
                productId,
                name: productName,
                price,
                quantity,
                type: productType
            };
            cart.push(newItem);
            console.log('‚ûï Nuevo producto agregado:', newItem);
        }

        qtyElement.textContent = '0';

        // Update stock display in real-time
        updateStockDisplay(productId, stock, quantity);

        updateCartDisplay();
        console.log('üõí Carrito actualizado:', cart);
        
        showToast(`${productName} agregado al pedido`, 'success');
    }

    // Update stock display after adding to cart
    function updateStockDisplay(productId, currentStock, quantityAdded) {
        const stockValueElement = document.getElementById(`stock-value-${productId}`);
        const stockIndicator = document.getElementById(`stock-${productId}`);

        if (!stockValueElement || !stockIndicator) return;

        // Calculate quantity already in cart for this product
        const existingItem = cart.find(item => item.productId === productId);
        const totalInCart = existingItem ? existingItem.quantity : 0;

        // Calculate remaining stock
        const remainingStock = Math.max(0, currentStock - totalInCart);

        // Update the displayed stock value
        stockValueElement.textContent = remainingStock;
        stockIndicator.dataset.stock = remainingStock;

        // Update stock indicator color classes
        stockIndicator.classList.remove('high', 'low', 'out');
        if (remainingStock > 10) {
            stockIndicator.classList.add('high');
        } else if (remainingStock > 0) {
            stockIndicator.classList.add('low');
        } else {
            stockIndicator.classList.add('out');
        }

        // Disable buttons if stock is 0
        if (remainingStock === 0) {
            const increaseBtn = document.querySelector(`button[onclick*="increaseQuantity(${productId}"]`);
            const decreaseBtn = document.querySelector(`button[onclick*="decreaseQuantity(${productId}"]`);
            const addBtn = document.querySelector(`button[onclick*="addToOrder(${productId}"]`);

            if (increaseBtn) increaseBtn.disabled = true;
            if (decreaseBtn) decreaseBtn.disabled = true;
            if (addBtn) {
                addBtn.disabled = true;
                addBtn.textContent = 'Sin Stock';
            }
        }
    }

    function updateCartDisplay() {
        const cartItemsContainer = document.getElementById('cart-items');
        const totalAmountElement = document.getElementById('total-amount');

        if (cart.length === 0) {
            cartItemsContainer.innerHTML = '<p style="text-align: center; color: #666;">Tu carrito est√° vac√≠o</p>';
            totalAmountElement.textContent = '0.00‚Ç¨';
            return;
        }

        let html = '';
        let total = 0;

        cart.forEach((item, index) => {
            const subtotal = item.price * item.quantity;
            total += subtotal;

            html += `
                <div class="cart-item">
                    <div class="item-info">
                        <div class="item-name">${item.name}</div>
                        <div class="item-details">${item.quantity} x ${item.price}‚Ç¨ = ${subtotal.toFixed(2)}‚Ç¨</div>
                    </div>
                    <div class="item-actions">
                        <button class="qty-btn" onclick="removeFromCart(${index})">√ó</button>
                    </div>
                </div>
            `;
        });

        cartItemsContainer.innerHTML = html;
        totalAmountElement.textContent = total.toFixed(2) + '‚Ç¨';
    }

    function removeFromCart(index) {
        cart.splice(index, 1);
        updateCartDisplay();
        showToast('Producto eliminado del carrito', 'success');
    }

    function limpiarCarrito() {
        cart = [];
        updateCartDisplay();
        showToast('Carrito limpiado', 'success');
    }

    function showOrderForm() {
        if (cart.length === 0) {
            showToast('El carrito est√° vac√≠o', 'error');
            return;
        }

        // Update order summary
        updateOrderSummary();

        // Show modal
        const modal = document.getElementById('order-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    function updateOrderSummary() {
        const summaryContainer = document.getElementById('order-summary-items');
        const totalElement = document.getElementById('order-total-amount');

        let html = '';
        let total = 0;

        cart.forEach(item => {
            const subtotal = item.price * item.quantity;
            total += subtotal;

            html += `
                <div class="order-summary-item">
                    <span>${item.name} (${item.quantity}x)</span>
                    <span>${subtotal.toFixed(2)}‚Ç¨</span>
                </div>
            `;
        });

        summaryContainer.innerHTML = html;
        totalElement.textContent = total.toFixed(2) + '‚Ç¨';
    }

    async function submitOrder(event) {
        event.preventDefault();
        console.log('üöÄ Iniciando submitOrder...');

        const form = event.target;
        const formData = new FormData(form);
        const metodoPago = formData.get('metodo_pago');

        // Verificar que hay productos en el carrito
        if (!cart || cart.length === 0) {
            showToast('El carrito est√° vac√≠o. A√±ade productos antes de enviar el pedido.', 'error');
            return;
        }

        // Verificar campos requeridos
        const requiredFields = ['nombre', 'apellidos', 'dni', 'telefono', 'direccion'];
        for (const field of requiredFields) {
            if (!formData.get(field)) {
                showToast(`El campo ${field} es obligatorio`, 'error');
                return;
            }
        }

        // Calculate total
        const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        console.log('üí∞ Total calculado:', total);

        // Prepare order data
        const orderData = {
            nombre: formData.get('nombre'),
            apellidos: formData.get('apellidos'),
            dni: formData.get('dni'),
            telefono: formData.get('telefono'),
            direccion: formData.get('direccion'),
            productos: cart.map(item => ({
                id: item.productId,
                nombre: item.name,
                cantidad: item.quantity,
                precio: item.price
            })),
            total: total
        };

        console.log('üì¶ Datos del pedido:', orderData);

        try {
            // Show loading
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = '‚è≥ Procesando...';

            if (metodoPago === 'tarjeta') {
                console.log('üí≥ Procesando pago con tarjeta...');
                // Process Stripe payment first
                await processStripePayment(orderData);
            } else {
                console.log('üíµ Procesando pago contra reembolso...');
                // Create order for cash on delivery
                const { createPedidoDomicilio } = await import('/src/functions/domicilio.js');
                const result = await createPedidoDomicilio({
                    ...orderData,
                    is_paid: false,
                    payment_method: 'efectivo'
                });

                console.log('üìã Resultado creaci√≥n pedido:', result);

                if (result && result.success) {
                    // Hide order modal
                    const orderModal = document.getElementById('order-modal');
                    if (orderModal) {
                        orderModal.classList.add('hidden');
                    }

                    // Show confirmation modal
                    showConfirmationModal(result.data.id);

                    // Clear cart
                    limpiarCarrito();

                    showToast('‚úÖ Pedido enviado correctamente', 'success');
                } else {
                    const errorMsg = result?.error || 'Error desconocido al crear el pedido';
                    console.error('‚ùå Error en creaci√≥n:', errorMsg);
                    showToast(`‚ùå Error al enviar el pedido: ${errorMsg}`, 'error');
                }
            }
        } catch (error) {
            console.error('‚ùå Error general en submitOrder:', error);
            showToast(`‚ùå Error al enviar el pedido: ${error.message}`, 'error');
        } finally {
            // Reset button
            const submitBtn = form.querySelector('button[type="submit"]');
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = 'üì§ ENVIAR PEDIDO';
            }
        }
    }

    // Variables globales para Stripe
    let stripe;
    let elements;
    let cardElement;

    // Inicializar Stripe cuando se carga la p√°gina
    async function initializeStripe() {
        try {
            if (typeof window !== 'undefined' && window.Stripe) {
                stripe = window.Stripe('pk_test_51SIAHpG7PBn8Fz7eNFhod8jPIvPdBwmvsePOWyUqHOYzEJ6pyt1fxbD2x4pAr3OSDxzMc9ZQfPbyYcisAxGBi61x000TqU4tSw');
                elements = stripe.elements();
                
                // Crear elemento de tarjeta
                cardElement = elements.create('card', {
                    style: {
                        base: {
                            fontSize: '16px',
                            color: '#424770',
                            '::placeholder': {
                                color: '#aab7c4',
                            },
                        },
                        invalid: {
                            color: '#9e2146',
                        },
                    },
                    hidePostalCode: true
                });

                // Escuchar cambios en el elemento de tarjeta para mostrar errores
                cardElement.on('change', function(event) {
                    const displayError = document.getElementById('card-errors');
                    if (event.error) {
                        displayError.textContent = event.error.message;
                    } else {
                        displayError.textContent = '';
                    }
                });

                console.log('‚úÖ Stripe inicializado correctamente');
            } else {
                console.error('‚ùå Stripe no est√° disponible');
            }
        } catch (error) {
            console.error('‚ùå Error inicializando Stripe:', error);
        }
    }

    // Mostrar u ocultar el elemento de tarjeta basado en la selecci√≥n
    function toggleCardElement() {
        try {
            const paymentMethodElement = document.querySelector('input[name="metodo_pago"]:checked');
            const cardContainer = document.getElementById('card-element-container');
            
            if (!paymentMethodElement || !cardContainer) {
                return;
            }
            
            const paymentMethod = paymentMethodElement.value;
            
            if (paymentMethod === 'tarjeta') {
                cardContainer.style.display = 'block';
                if (cardElement && !cardElement._mounted) {
                    cardElement.mount('#card-element');
                }
            } else {
                cardContainer.style.display = 'none';
            }
        } catch (error) {
            console.error('Error en toggleCardElement:', error);
        }
    }

    async function processStripePayment(orderData) {
        try {
            console.log('ÔøΩ Iniciando pago con Stripe...');
            
            if (!stripe || !cardElement) {
                throw new Error('Stripe no est√° inicializado correctamente');
            }

            // Crear m√©todo de pago (como en mesa)
            console.log('üîë Creando m√©todo de pago...');
            const { error, paymentMethod } = await stripe.createPaymentMethod({
                type: 'card',
                card: cardElement,
                billing_details: {
                    name: orderData.nombre,
                    phone: orderData.telefono,
                    address: {
                        line1: orderData.direccion
                    }
                }
            });

            if (error) {
                throw new Error(error.message);
            }

            console.log('‚úÖ M√©todo de pago creado exitosamente:', paymentMethod.id);

            // Crear el pedido como pagado (igual que en mesa)
            const { createPedidoDomicilio } = await import('/src/functions/domicilio.js');
            const result = await createPedidoDomicilio({
                ...orderData,
                is_paid: true,
                payment_method: 'tarjeta',
                stripe_payment_id: paymentMethod.id
            });

            if (result) {
                // Hide order modal
                const orderModal = document.getElementById('order-modal');
                if (orderModal) {
                    orderModal.classList.add('hidden');
                }

                // Show confirmation modal
                showConfirmationModal(result.id);

                // Clear cart
                limpiarCarrito();

                showToast('‚úÖ Pago procesado correctamente', 'success');
                return result;
            } else {
                throw new Error('Error al crear el pedido despu√©s del pago');
            }
            
        } catch (error) {
            console.error('Error processing payment:', error);
            showToast(`Error en el pago: ${error.message}`, 'error');
            throw error;
        }
    }

    function showConfirmationModal(pedidoId) {
        const modal = document.getElementById('confirmation-modal');
        const pedidoIdElement = document.getElementById('pedido-id');

        if (pedidoIdElement) {
            pedidoIdElement.textContent = pedidoId;
        }

        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    function toggleCart() {
        const cartContent = document.getElementById('cart-content');
        cartVisible = !cartVisible;
        cartContent.classList.toggle('collapsed', !cartVisible);
    }

    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;

        toastContainer.appendChild(toast);

        setTimeout(() => {
            toast.remove();
        }, 5000);
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function() {
        // Cart toggle
        const cartToggle = document.getElementById('cart-toggle');
        if (cartToggle) {
            cartToggle.addEventListener('click', toggleCart);
        }

        // Order form
        const orderForm = document.getElementById('order-form');
        if (orderForm) {
            console.log('‚úÖ Formulario encontrado, registrando evento submit');
            orderForm.addEventListener('submit', submitOrder);
        } else {
            console.error('‚ùå No se encontr√≥ el formulario con ID "order-form"');
        }

        // Modal close buttons
        const closeOrderModal = document.getElementById('close-order-modal');
        if (closeOrderModal) {
            closeOrderModal.addEventListener('click', () => {
                const modal = document.getElementById('order-modal');
                if (modal) modal.classList.add('hidden');
            });
        }

        const cancelOrder = document.getElementById('cancel-order');
        if (cancelOrder) {
            cancelOrder.addEventListener('click', () => {
                const modal = document.getElementById('order-modal');
                if (modal) modal.classList.add('hidden');
            });
        }

        const backToHome = document.getElementById('back-to-home');
        if (backToHome) {
            backToHome.addEventListener('click', () => {
                window.location.href = '/';
            });
        }

        // Initialize cart display
        updateCartDisplay();
        
        // Inicializar Stripe despu√©s de un peque√±o delay para asegurar que el script se carg√≥
        setTimeout(initializeStripe, 1000);
        
        // Configurar el toggle inicial
        setTimeout(toggleCardElement, 1100);
    });

    // Global functions
    window.increaseQuantity = increaseQuantity;
    window.decreaseQuantity = decreaseQuantity;
    window.addToOrder = addToOrder;
    window.removeFromCart = removeFromCart;
    window.limpiarCarrito = limpiarCarrito;
    window.showOrderForm = showOrderForm;
    window.toggleCardElement = toggleCardElement;
</script>