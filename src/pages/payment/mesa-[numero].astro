---
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
    const paths = [];
    for (let i = 1; i <= 50; i++) {
        paths.push({ params: { numero: i.toString() } });
    }
    return paths;
}

const { numero } = Astro.params;
const mesaNumero = parseInt(numero || '0');

if (isNaN(mesaNumero) || mesaNumero <= 0) {
    return Astro.redirect('/');
}

// SEGURIDAD: Redireccionar a p√°gina de acceso restringido
// El pago ahora requiere token de acceso via QR
return Astro.redirect('/mesa-info');
---

<Layout title={`Pagar Mesa ${numero} - BarBorja`}>
    <div class="payment-container">
        <div class="payment-card">
            <div class="payment-header">
                <h1>üí≥ Pagar Cuenta</h1>
                <p>Mesa {numero}</p>
            </div>

            <div id="loading-orders" class="loading-section">
                <div class="spinner"></div>
                <p>Cargando pedidos...</p>
            </div>

            <div id="order-summary" class="order-summary" style="display: none;">
                <!-- Orders will be loaded here -->
            </div>

            <div id="payment-options" class="payment-options" style="display: none;">
                <h2>M√©todo de Pago</h2>
                <div class="payment-buttons">
                    <button class="btn btn-primary" id="card-payment-btn">
                        üí≥ Pagar con Tarjeta
                    </button>
                    <button class="btn btn-success" id="bar-payment-btn">
                        üíµ Pagar en Barra
                    </button>
                </div>
            </div>

            <div id="no-orders" class="no-orders" style="display: none;">
                <p>‚ö†Ô∏è No hay pedidos entregados para pagar</p>
                <a href="/mesa/{numero}" class="btn btn-secondary">Volver a la Mesa</a>
            </div>
        </div>

        <!-- Stripe Payment Modal -->
        <div id="stripe-modal" class="modal hidden">
            <div class="modal-content stripe-modal">
                <div class="modal-header">
                    <h2>üí≥ Pago con Tarjeta</h2>
                    <button class="close-btn" id="close-stripe-modal">‚úï</button>
                </div>
                <div class="stripe-info">
                    <p>Total a pagar: <strong id="stripe-total">0.00‚Ç¨</strong></p>
                </div>
                <div id="stripe-card-element" class="stripe-element">
                    <!-- Stripe Card Element will be mounted here -->
                </div>
                <div class="stripe-actions">
                    <button class="btn btn-primary" id="submit-payment">
                        Pagar
                    </button>
                </div>
            </div>
        </div>

        <!-- Success Modal -->
        <div id="success-modal" class="modal hidden">
            <div class="modal-content">
                <h2>‚úÖ Pago Registrado</h2>
                <p>Gracias por tu visita</p>
                <div class="modal-actions">
                    <button class="btn btn-primary" id="back-to-table-btn">
                        Volver a la Mesa
                    </button>
                </div>
            </div>
        </div>
    </div>
</Layout>

<style>
    .payment-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .payment-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        max-width: 600px;
        width: 100%;
        padding: 30px;
    }

    .payment-header {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid #f0f0f0;
    }

    .payment-header h1 {
        margin: 0 0 10px 0;
        color: #2c3e50;
        font-size: 2rem;
    }

    .payment-header p {
        margin: 0;
        color: #7f8c8d;
        font-size: 1.2rem;
    }

    .loading-section {
        text-align: center;
        padding: 40px;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .order-summary {
        margin-bottom: 30px;
    }

    .order-summary h2 {
        color: #2c3e50;
        margin-bottom: 20px;
        font-size: 1.5rem;
    }

    .order-group {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
    }

    .order-group-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        padding-bottom: 10px;
        border-bottom: 1px solid #dee2e6;
    }

    .order-badge {
        background: #667eea;
        color: white;
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: bold;
    }

    .order-time {
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .items-list {
        margin-top: 10px;
    }

    .item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid #e9ecef;
    }

    .item:last-child {
        border-bottom: none;
    }

    .total-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
    }

    .total-amount {
        display: flex;
        justify-content: space-between;
        font-size: 1.5rem;
        font-weight: bold;
        color: #2c3e50;
    }

    .payment-options {
        margin-top: 30px;
    }

    .payment-options h2 {
        color: #2c3e50;
        margin-bottom: 20px;
        font-size: 1.3rem;
        text-align: center;
    }

    .payment-buttons {
        display: flex;
        gap: 15px;
        flex-direction: column;
    }

    .btn {
        padding: 15px 30px;
        border: none;
        border-radius: 10px;
        font-size: 1.1rem;
        font-weight: bold;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(102, 126, 234, 0.4);
    }

    .btn-success {
        background: linear-gradient(135deg, #27ae60, #2ecc71);
        color: white;
    }

    .btn-success:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 20px rgba(39, 174, 96, 0.4);
    }

    .btn-secondary {
        background: #95a5a6;
        color: white;
    }

    .btn-secondary:hover {
        background: #7f8c8d;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .no-orders {
        text-align: center;
        padding: 40px;
    }

    .no-orders p {
        font-size: 1.2rem;
        color: #e74c3c;
        margin-bottom: 20px;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal.hidden {
        display: none;
    }

    .modal-content {
        background: white;
        padding: 40px;
        border-radius: 15px;
        text-align: center;
        max-width: 400px;
        width: 90%;
    }

    .stripe-modal {
        max-width: 500px;
        text-align: left;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f0f0f0;
    }

    .modal-header h2 {
        margin: 0;
        color: #2c3e50;
    }

    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #95a5a6;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .close-btn:hover {
        color: #e74c3c;
    }

    .stripe-info {
        margin-bottom: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        text-align: center;
    }

    .stripe-info strong {
        font-size: 1.5rem;
        color: #667eea;
    }

    .stripe-element {
        margin: 20px 0;
        padding: 15px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background: #fafafa;
    }

    .stripe-actions {
        margin-top: 20px;
    }

    .stripe-actions .btn {
        width: 100%;
    }

    .modal-content h2 {
        color: #27ae60;
        margin-bottom: 15px;
    }

    .modal-actions {
        margin-top: 20px;
    }

    .btn-secondary {
        background: #95a5a6;
        color: white;
    }

    .btn-secondary:hover {
        background: #7f8c8d;
    }

    .no-orders {
        text-align: center;
        padding: 40px;
    }

    .no-orders p {
        font-size: 1.2rem;
        color: #e74c3c;
        margin-bottom: 20px;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal.hidden {
        display: none;
    }

    .modal-content {
        background: white;
        padding: 40px;
        border-radius: 15px;
        text-align: center;
        max-width: 400px;
        width: 90%;
    }

    .modal-content h2 {
        color: #27ae60;
        margin-bottom: 15px;
    }

    .modal-actions {
        margin-top: 20px;
    }

    @media (max-width: 768px) {
        .payment-card {
            padding: 20px;
        }

        .payment-header h1 {
            font-size: 1.5rem;
        }
    }
</style>

<script is:inline src="https://js.stripe.com/v3/"></script>

<script>
    import { supabase } from '../../lib/supabase.js';

    // Get mesa number from URL
    const urlPath = window.location.pathname;
    const mesaNumero = parseInt(urlPath.match(/\/payment\/mesa-(\d+)/)?.[1] || '0');
    
    let orders = [];
    let totalAmount = 0;
    let stripe = null;
    let elements = null;
    let cardElement = null;

    async function loadOrders() {
        const loadingEl = document.getElementById('loading-orders');
        const summaryEl = document.getElementById('order-summary');
        const paymentEl = document.getElementById('payment-options');
        const noOrdersEl = document.getElementById('no-orders');

        try {
            const { data, error } = await supabase
                .from('orders')
                .select(`
                    order_id,
                    table_number,
                    status,
                    total_amount,
                    created_at,
                    is_paid,
                    order_items (
                        quantity,
                        price,
                        products (
                            name,
                            type
                        )
                    )
                `)
                .eq('table_number', mesaNumero)
                .eq('is_paid', false)
                .neq('status', 'cancelado')
                .order('created_at', { ascending: false });

            if (error) throw error;

            if (loadingEl) loadingEl.style.display = 'none';

            if (!data || data.length === 0) {
                if (noOrdersEl) noOrdersEl.style.display = 'block';
                return;
            }

            orders = data;
            totalAmount = orders.reduce((sum, order) => sum + (order.total_amount || 0), 0);

            displayOrders();

            if (summaryEl) summaryEl.style.display = 'block';
            if (paymentEl) paymentEl.style.display = 'block';

        } catch (error) {
            console.error('Error loading orders:', error);
            if (loadingEl) loadingEl.innerHTML = '<p style="color: red;">Error al cargar los pedidos</p>';
        }
    }

    function displayOrders() {
        const summaryEl = document.getElementById('order-summary');
        if (!summaryEl) return;

        let html = '<h2>Resumen de Pedidos</h2>';

        orders.forEach(order => {
            const orderDate = new Date(order.created_at).toLocaleTimeString('es-ES', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });

            html += `
                <div class="order-group">
                    <div class="order-group-header">
                        <span class="order-badge">Pedido #${order.order_id}</span>
                        <span class="order-time">${orderDate}</span>
                    </div>
                    <div class="items-list">
            `;

            order.order_items?.forEach(item => {
                const icon = item.products?.type === 'cocina' ? 'üç≥' : 'üç∫';
                html += `
                    <div class="item">
                        <span>${icon} ${item.quantity}x ${item.products?.name}</span>
                        <span>${(item.quantity * item.price).toFixed(2)}‚Ç¨</span>
                    </div>
                `;
            });

            html += `
                    </div>
                </div>
            `;
        });

        html += `
            <div class="total-section">
                <div class="total-amount">
                    <span>TOTAL:</span>
                    <span>${totalAmount.toFixed(2)}‚Ç¨</span>
                </div>
            </div>
        `;

        summaryEl.innerHTML = html;
    }

    async function processBarPayment() {
        try {
            // Mark orders as pending bar payment (status = 'pagado' but is_paid = false)
            const orderIds = orders.map(o => o.order_id);
            
            const { error } = await supabase
                .from('orders')
                .update({ 
                    status: 'pagado',
                    payment_method: 'efectivo'
                })
                .in('order_id', orderIds);

            if (error) throw error;

            // Show ticket immediately without marking as paid
            showBarPaymentTicket();
        } catch (error) {
            console.error('Error processing payment:', error);
            alert('Error al procesar el pago. Por favor, intenta de nuevo.');
        }
    }

    function showBarPaymentTicket() {
        // Generate ticket HTML
        let ticketHTML = `
            <div style="font-family: 'Courier New', monospace; max-width: 300px; margin: 0 auto; background: white; padding: 20px; border: 2px solid #333;">
                <div style="text-align: center; border-bottom: 2px dashed #333; padding-bottom: 10px; margin-bottom: 10px;">
                    <h2 style="margin: 0; font-size: 20px;">BAR BORJA</h2>
                    <p style="margin: 5px 0; font-size: 12px;">Ticket de Pago</p>
                    <p style="margin: 5px 0; font-size: 11px;">${new Date().toLocaleString('es-ES')}</p>
                </div>
                
                <div style="margin: 15px 0;">
                    <p style="margin: 5px 0; font-weight: bold;">Mesa: ${mesaNumero}</p>
                    <p style="margin: 5px 0; font-weight: bold;">M√©todo: Efectivo (Barra)</p>
                </div>
                
                <div style="border-top: 2px dashed #333; border-bottom: 2px dashed #333; padding: 10px 0; margin: 10px 0;">
        `;

        orders.forEach(order => {
            order.order_items?.forEach(item => {
                const productName = item.products?.name || 'Producto';
                const quantity = item.quantity;
                const price = item.price;
                const total = quantity * price;
                
                ticketHTML += `
                    <div style="display: flex; justify-content: space-between; margin: 5px 0; font-size: 13px;">
                        <span>${quantity}x ${productName}</span>
                        <span>${total.toFixed(2)}‚Ç¨</span>
                    </div>
                `;
            });
        });

        ticketHTML += `
                </div>
                
                <div style="margin-top: 15px; padding-top: 10px; border-top: 2px solid #333;">
                    <div style="display: flex; justify-content: space-between; font-size: 16px; font-weight: bold;">
                        <span>TOTAL:</span>
                        <span>${totalAmount.toFixed(2)}‚Ç¨</span>
                    </div>
                </div>
                
                <div style="background: #fff3cd; border: 2px solid #ffc107; border-radius: 5px; padding: 10px; margin-top: 15px;">
                    <p style="margin: 0; font-size: 12px; color: #856404; text-align: center; font-weight: bold;">
                        ‚ö†Ô∏è PENDIENTE DE CONFIRMACI√ìN
                    </p>
                    <p style="margin: 5px 0 0 0; font-size: 11px; color: #856404; text-align: center;">
                        Presente este ticket en barra para confirmar el pago
                    </p>
                </div>
                
                <div style="text-align: center; margin-top: 20px; padding-top: 15px; border-top: 2px dashed #333;">
                    <p style="margin: 5px 0; font-size: 12px;">¬°Gracias por su visita!</p>
                    <p style="margin: 5px 0; font-size: 11px;">www.barborja.com</p>
                </div>
            </div>
        `;

        // Create and show modal with ticket
        const modal = document.createElement('div');
        modal.id = 'ticket-modal';
        modal.className = 'modal';
        modal.style.display = 'flex';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 400px;">
                <div class="modal-header">
                    <h2>üßæ Ticket de Pago</h2>
                    <button class="close-btn" onclick="document.getElementById('ticket-modal').remove()">‚úï</button>
                </div>
                <div id="printable-ticket" style="background: white; padding: 20px; margin: 20px 0;">
                    ${ticketHTML}
                </div>
                <div class="modal-actions" style="display: flex; gap: 10px; justify-content: center;">
                    <button class="btn btn-primary" onclick="printTicket()">
                        üñ®Ô∏è Imprimir Ticket
                    </button>
                    <button class="btn btn-secondary" id="back-to-table-btn-ticket">
                        Volver a la Mesa
                    </button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);
        
        // Add event listener for back button
        document.getElementById('back-to-table-btn-ticket').addEventListener('click', () => {
            window.location.href = `/mesa/${mesaNumero}`;
        });
    }

    function printTicket() {
        const printContents = document.getElementById('printable-ticket').innerHTML;
        const originalContents = document.body.innerHTML;

        document.body.innerHTML = printContents;
        window.print();
        document.body.innerHTML = originalContents;
        
        // Reload to restore functionality
        window.location.reload();
    }

    function showSuccessModal() {
        const modal = document.getElementById('success-modal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    async function initializeStripe() {
        try {
            // Initialize Stripe
            const stripeKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
            if (!stripeKey) {
                throw new Error('Stripe key not configured');
            }

            stripe = window.Stripe(stripeKey);

            // Create card element
            elements = stripe.elements();
            cardElement = elements.create('card', {
                style: {
                    base: {
                        fontSize: '16px',
                        color: '#32325d',
                        '::placeholder': {
                            color: '#aab7c4'
                        }
                    },
                    invalid: {
                        color: '#fa755a'
                    }
                }
            });

            // Mount the card element
            cardElement.mount('#stripe-card-element');

            // Update total in modal
            const stripeTotalEl = document.getElementById('stripe-total');
            if (stripeTotalEl) {
                stripeTotalEl.textContent = totalAmount.toFixed(2) + '‚Ç¨';
            }

            // Show the modal
            const modal = document.getElementById('stripe-modal');
            if (modal) {
                modal.classList.remove('hidden');
            }

        } catch (error) {
            console.error('Error initializing Stripe:', error);
            alert('Error al inicializar el pago con tarjeta. Por favor, intenta de nuevo.');
        }
    }

    async function processCardPayment() {
        if (!stripe || !cardElement) {
            alert('Stripe no est√° inicializado correctamente');
            return;
        }

        const submitBtn = document.getElementById('submit-payment');
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.textContent = 'Procesando...';
        }

        try {
            // Create payment method
            const { error, paymentMethod } = await stripe.createPaymentMethod({
                type: 'card',
                card: cardElement,
            });

            if (error) {
                throw new Error(error.message);
            }

            // Payment method created successfully
            // Update orders to 'pagado' status with is_paid flag
            const orderIds = orders.map(o => o.order_id);
            
            const { error: updateError } = await supabase
                .from('orders')
                .update({ 
                    status: 'pagado',
                    payment_method: 'tarjeta',
                    is_paid: true
                })
                .in('order_id', orderIds);

            if (updateError) throw updateError;

            // Close Stripe modal
            const stripeModal = document.getElementById('stripe-modal');
            if (stripeModal) {
                stripeModal.classList.add('hidden');
            }

            // Clean up Stripe elements
            if (cardElement) {
                cardElement.unmount();
                cardElement = null;
            }

            // Show success modal
            showSuccessModal();

        } catch (error) {
            console.error('Error processing card payment:', error);
            alert(`Error al procesar el pago: ${error.message}`);
        } finally {
            if (submitBtn) {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Pagar';
            }
        }
    }

    function closeStripeModal() {
        const modal = document.getElementById('stripe-modal');
        if (modal) {
            modal.classList.add('hidden');
        }

        // Clean up card element
        if (cardElement) {
            cardElement.unmount();
            cardElement = null;
        }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
        loadOrders();

        const barPaymentBtn = document.getElementById('bar-payment-btn');
        if (barPaymentBtn) {
            barPaymentBtn.addEventListener('click', processBarPayment);
        }

        const cardPaymentBtn = document.getElementById('card-payment-btn');
        if (cardPaymentBtn) {
            cardPaymentBtn.addEventListener('click', initializeStripe);
        }

        const submitPaymentBtn = document.getElementById('submit-payment');
        if (submitPaymentBtn) {
            submitPaymentBtn.addEventListener('click', processCardPayment);
        }

        const closeStripeBtn = document.getElementById('close-stripe-modal');
        if (closeStripeBtn) {
            closeStripeBtn.addEventListener('click', closeStripeModal);
        }

        const backToTableBtn = document.getElementById('back-to-table-btn');
        if (backToTableBtn) {
            backToTableBtn.addEventListener('click', () => {
                window.location.href = `/mesa/${mesaNumero}`;
            });
        }
    });

</script>

</Layout>
